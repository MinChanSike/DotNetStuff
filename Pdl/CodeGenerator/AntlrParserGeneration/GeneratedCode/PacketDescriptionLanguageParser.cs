//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 PacketDescriptionLanguage.g 2013-03-26 10:08:42

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace Marler.Pdl
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class PacketDescriptionLanguageParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARRAY_TYPE_FIELD", "BIT_TYPE", "BYTE_TYPE", "COMMENT", "DATA_BLOCK_DEFINITION", "DOUBLE_TYPE", "ENUM_DECLARATION", "ENUM_DEFINITION", "EXPONENT", "FLOAT_TYPE", "ID", "INTEGER", "INT_TYPE", "LONG_TYPE", "OPTIONAL_KEYWORD", "SBYTE_TYPE", "SHORT_TYPE", "SIMPLE_TYPE_FIELD", "STRING_TYPE", "TYPE_ID", "UINT_TYPE", "ULONG_TYPE", "USHORT_TYPE", "','", "';'", "'='", "'['", "']'", "'enum'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int ARRAY_TYPE_FIELD=4;
	public const int BIT_TYPE=5;
	public const int BYTE_TYPE=6;
	public const int COMMENT=7;
	public const int DATA_BLOCK_DEFINITION=8;
	public const int DOUBLE_TYPE=9;
	public const int ENUM_DECLARATION=10;
	public const int ENUM_DEFINITION=11;
	public const int EXPONENT=12;
	public const int FLOAT_TYPE=13;
	public const int ID=14;
	public const int INTEGER=15;
	public const int INT_TYPE=16;
	public const int LONG_TYPE=17;
	public const int OPTIONAL_KEYWORD=18;
	public const int SBYTE_TYPE=19;
	public const int SHORT_TYPE=20;
	public const int SIMPLE_TYPE_FIELD=21;
	public const int STRING_TYPE=22;
	public const int TYPE_ID=23;
	public const int UINT_TYPE=24;
	public const int ULONG_TYPE=25;
	public const int USHORT_TYPE=26;

	public PacketDescriptionLanguageParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PacketDescriptionLanguageParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return PacketDescriptionLanguageParser.tokenNames; } }
	public override string GrammarFileName { get { return "PacketDescriptionLanguage.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_primitiveTypeModifier();
	partial void LeaveRule_primitiveTypeModifier();
	// $ANTLR start "primitiveTypeModifier"
	// PacketDescriptionLanguage.g:24:1: primitiveTypeModifier : OPTIONAL_KEYWORD ;
	[GrammarRule("primitiveTypeModifier")]
	private AstParserRuleReturnScope<object, IToken> primitiveTypeModifier()
	{
		EnterRule_primitiveTypeModifier();
		EnterRule("primitiveTypeModifier", 1);
		TraceIn("primitiveTypeModifier", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OPTIONAL_KEYWORD1 = default(IToken);

		object OPTIONAL_KEYWORD1_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primitiveTypeModifier");
		DebugLocation(24, 18);
		try
		{
			// PacketDescriptionLanguage.g:25:2: ( OPTIONAL_KEYWORD )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:25:3: OPTIONAL_KEYWORD
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(25, 3);
			OPTIONAL_KEYWORD1=(IToken)Match(input,OPTIONAL_KEYWORD,Follow._OPTIONAL_KEYWORD_in_primitiveTypeModifier77); 
			OPTIONAL_KEYWORD1_tree = (object)adaptor.Create(OPTIONAL_KEYWORD1);
			adaptor.AddChild(root_0, OPTIONAL_KEYWORD1_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveTypeModifier", 1);
			LeaveRule("primitiveTypeModifier", 1);
			LeaveRule_primitiveTypeModifier();
		}
		DebugLocation(25, 18);
		} finally { DebugExitRule(GrammarFileName, "primitiveTypeModifier"); }
		return retval;

	}
	// $ANTLR end "primitiveTypeModifier"

	partial void EnterRule_unsignedIntegerType();
	partial void LeaveRule_unsignedIntegerType();
	// $ANTLR start "unsignedIntegerType"
	// PacketDescriptionLanguage.g:43:1: unsignedIntegerType : ( BYTE_TYPE | USHORT_TYPE | UINT_TYPE | ULONG_TYPE );
	[GrammarRule("unsignedIntegerType")]
	private AstParserRuleReturnScope<object, IToken> unsignedIntegerType()
	{
		EnterRule_unsignedIntegerType();
		EnterRule("unsignedIntegerType", 2);
		TraceIn("unsignedIntegerType", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set2 = default(IToken);

		object set2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unsignedIntegerType");
		DebugLocation(43, 51);
		try
		{
			// PacketDescriptionLanguage.g:44:2: ( BYTE_TYPE | USHORT_TYPE | UINT_TYPE | ULONG_TYPE )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(44, 2);

			set2=(IToken)input.LT(1);
			if (input.LA(1)==BYTE_TYPE||(input.LA(1)>=UINT_TYPE && input.LA(1)<=USHORT_TYPE))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set2));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unsignedIntegerType", 2);
			LeaveRule("unsignedIntegerType", 2);
			LeaveRule_unsignedIntegerType();
		}
		DebugLocation(44, 51);
		} finally { DebugExitRule(GrammarFileName, "unsignedIntegerType"); }
		return retval;

	}
	// $ANTLR end "unsignedIntegerType"

	partial void EnterRule_signedIntegerType();
	partial void LeaveRule_signedIntegerType();
	// $ANTLR start "signedIntegerType"
	// PacketDescriptionLanguage.g:55:1: signedIntegerType : ( SBYTE_TYPE | SHORT_TYPE | INT_TYPE | LONG_TYPE );
	[GrammarRule("signedIntegerType")]
	private AstParserRuleReturnScope<object, IToken> signedIntegerType()
	{
		EnterRule_signedIntegerType();
		EnterRule("signedIntegerType", 3);
		TraceIn("signedIntegerType", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set3 = default(IToken);

		object set3_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "signedIntegerType");
		DebugLocation(55, 49);
		try
		{
			// PacketDescriptionLanguage.g:56:2: ( SBYTE_TYPE | SHORT_TYPE | INT_TYPE | LONG_TYPE )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(56, 2);

			set3=(IToken)input.LT(1);
			if ((input.LA(1)>=INT_TYPE && input.LA(1)<=LONG_TYPE)||(input.LA(1)>=SBYTE_TYPE && input.LA(1)<=SHORT_TYPE))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set3));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("signedIntegerType", 3);
			LeaveRule("signedIntegerType", 3);
			LeaveRule_signedIntegerType();
		}
		DebugLocation(56, 49);
		} finally { DebugExitRule(GrammarFileName, "signedIntegerType"); }
		return retval;

	}
	// $ANTLR end "signedIntegerType"

	partial void EnterRule_floatingPointType();
	partial void LeaveRule_floatingPointType();
	// $ANTLR start "floatingPointType"
	// PacketDescriptionLanguage.g:62:1: floatingPointType : ( FLOAT_TYPE | DOUBLE_TYPE );
	[GrammarRule("floatingPointType")]
	private AstParserRuleReturnScope<object, IToken> floatingPointType()
	{
		EnterRule_floatingPointType();
		EnterRule("floatingPointType", 4);
		TraceIn("floatingPointType", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set4 = default(IToken);

		object set4_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "floatingPointType");
		DebugLocation(62, 27);
		try
		{
			// PacketDescriptionLanguage.g:63:2: ( FLOAT_TYPE | DOUBLE_TYPE )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(63, 2);

			set4=(IToken)input.LT(1);
			if (input.LA(1)==DOUBLE_TYPE||input.LA(1)==FLOAT_TYPE)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set4));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("floatingPointType", 4);
			LeaveRule("floatingPointType", 4);
			LeaveRule_floatingPointType();
		}
		DebugLocation(63, 27);
		} finally { DebugExitRule(GrammarFileName, "floatingPointType"); }
		return retval;

	}
	// $ANTLR end "floatingPointType"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// PacketDescriptionLanguage.g:77:1: type : ( BIT_TYPE | unsignedIntegerType | signedIntegerType | STRING_TYPE | floatingPointType | TYPE_ID );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<object, IToken> type()
	{
		EnterRule_type();
		EnterRule("type", 5);
		TraceIn("type", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken BIT_TYPE5 = default(IToken);
		IToken STRING_TYPE8 = default(IToken);
		IToken TYPE_ID10 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unsignedIntegerType6 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> signedIntegerType7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> floatingPointType9 = default(AstParserRuleReturnScope<object, IToken>);

		object BIT_TYPE5_tree = default(object);
		object STRING_TYPE8_tree = default(object);
		object TYPE_ID10_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(77, 96);
		try
		{
			// PacketDescriptionLanguage.g:78:3: ( BIT_TYPE | unsignedIntegerType | signedIntegerType | STRING_TYPE | floatingPointType | TYPE_ID )
			int alt1=6;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case BIT_TYPE:
				{
				alt1 = 1;
				}
				break;
			case BYTE_TYPE:
			case UINT_TYPE:
			case ULONG_TYPE:
			case USHORT_TYPE:
				{
				alt1 = 2;
				}
				break;
			case INT_TYPE:
			case LONG_TYPE:
			case SBYTE_TYPE:
			case SHORT_TYPE:
				{
				alt1 = 3;
				}
				break;
			case STRING_TYPE:
				{
				alt1 = 4;
				}
				break;
			case DOUBLE_TYPE:
			case FLOAT_TYPE:
				{
				alt1 = 5;
				}
				break;
			case TYPE_ID:
				{
				alt1 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:78:3: BIT_TYPE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 3);
				BIT_TYPE5=(IToken)Match(input,BIT_TYPE,Follow._BIT_TYPE_in_type333); 
				BIT_TYPE5_tree = (object)adaptor.Create(BIT_TYPE5);
				adaptor.AddChild(root_0, BIT_TYPE5_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// PacketDescriptionLanguage.g:78:14: unsignedIntegerType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 14);
				PushFollow(Follow._unsignedIntegerType_in_type337);
				unsignedIntegerType6=unsignedIntegerType();
				PopFollow();

				adaptor.AddChild(root_0, unsignedIntegerType6.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// PacketDescriptionLanguage.g:78:36: signedIntegerType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 36);
				PushFollow(Follow._signedIntegerType_in_type341);
				signedIntegerType7=signedIntegerType();
				PopFollow();

				adaptor.AddChild(root_0, signedIntegerType7.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// PacketDescriptionLanguage.g:78:56: STRING_TYPE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 56);
				STRING_TYPE8=(IToken)Match(input,STRING_TYPE,Follow._STRING_TYPE_in_type345); 
				STRING_TYPE8_tree = (object)adaptor.Create(STRING_TYPE8);
				adaptor.AddChild(root_0, STRING_TYPE8_tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// PacketDescriptionLanguage.g:78:70: floatingPointType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 70);
				PushFollow(Follow._floatingPointType_in_type349);
				floatingPointType9=floatingPointType();
				PopFollow();

				adaptor.AddChild(root_0, floatingPointType9.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// PacketDescriptionLanguage.g:78:90: TYPE_ID
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(78, 90);
				TYPE_ID10=(IToken)Match(input,TYPE_ID,Follow._TYPE_ID_in_type353); 
				TYPE_ID10_tree = (object)adaptor.Create(TYPE_ID10);
				adaptor.AddChild(root_0, TYPE_ID10_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 5);
			LeaveRule("type", 5);
			LeaveRule_type();
		}
		DebugLocation(78, 96);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_enumDefinitionOptionalDeclaration();
	partial void LeaveRule_enumDefinitionOptionalDeclaration();
	// $ANTLR start "enumDefinitionOptionalDeclaration"
	// PacketDescriptionLanguage.g:109:1: enumDefinitionOptionalDeclaration : 'enum' ( unsignedIntegerType )? ID '{' ( enumValues )? ( ',' )? '}' ( enumDeclaration )? -> ^( ENUM_DEFINITION ID ( unsignedIntegerType )? ( enumDeclaration )? ( enumValues )? ) ;
	[GrammarRule("enumDefinitionOptionalDeclaration")]
	private AstParserRuleReturnScope<object, IToken> enumDefinitionOptionalDeclaration()
	{
		EnterRule_enumDefinitionOptionalDeclaration();
		EnterRule("enumDefinitionOptionalDeclaration", 6);
		TraceIn("enumDefinitionOptionalDeclaration", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal11 = default(IToken);
		IToken ID13 = default(IToken);
		IToken char_literal14 = default(IToken);
		IToken char_literal16 = default(IToken);
		IToken char_literal17 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unsignedIntegerType12 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumValues15 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumDeclaration18 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal11_tree = default(object);
		object ID13_tree = default(object);
		object char_literal14_tree = default(object);
		object char_literal16_tree = default(object);
		object char_literal17_tree = default(object);
		RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
		RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");
		RewriteRuleITokenStream stream_27=new RewriteRuleITokenStream(adaptor,"token 27");
		RewriteRuleSubtreeStream stream_unsignedIntegerType=new RewriteRuleSubtreeStream(adaptor,"rule unsignedIntegerType");
		RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
		RewriteRuleSubtreeStream stream_enumValues=new RewriteRuleSubtreeStream(adaptor,"rule enumValues");
		try { DebugEnterRule(GrammarFileName, "enumDefinitionOptionalDeclaration");
		DebugLocation(109, 1);
		try
		{
			// PacketDescriptionLanguage.g:110:2: ( 'enum' ( unsignedIntegerType )? ID '{' ( enumValues )? ( ',' )? '}' ( enumDeclaration )? -> ^( ENUM_DEFINITION ID ( unsignedIntegerType )? ( enumDeclaration )? ( enumValues )? ) )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:110:4: 'enum' ( unsignedIntegerType )? ID '{' ( enumValues )? ( ',' )? '}' ( enumDeclaration )?
			{
			DebugLocation(110, 4);
			string_literal11=(IToken)Match(input,32,Follow._32_in_enumDefinitionOptionalDeclaration482);  
			stream_32.Add(string_literal11);

			DebugLocation(110, 11);
			// PacketDescriptionLanguage.g:110:11: ( unsignedIntegerType )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==BYTE_TYPE||(LA2_1>=UINT_TYPE && LA2_1<=USHORT_TYPE)))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:110:11: unsignedIntegerType
				{
				DebugLocation(110, 11);
				PushFollow(Follow._unsignedIntegerType_in_enumDefinitionOptionalDeclaration484);
				unsignedIntegerType12=unsignedIntegerType();
				PopFollow();

				stream_unsignedIntegerType.Add(unsignedIntegerType12.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(110, 32);
			ID13=(IToken)Match(input,ID,Follow._ID_in_enumDefinitionOptionalDeclaration487);  
			stream_ID.Add(ID13);

			DebugLocation(110, 35);
			char_literal14=(IToken)Match(input,33,Follow._33_in_enumDefinitionOptionalDeclaration489);  
			stream_33.Add(char_literal14);

			DebugLocation(110, 39);
			// PacketDescriptionLanguage.g:110:39: ( enumValues )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==ID))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:110:39: enumValues
				{
				DebugLocation(110, 39);
				PushFollow(Follow._enumValues_in_enumDefinitionOptionalDeclaration491);
				enumValues15=enumValues();
				PopFollow();

				stream_enumValues.Add(enumValues15.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(110, 51);
			// PacketDescriptionLanguage.g:110:51: ( ',' )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==27))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:110:51: ','
				{
				DebugLocation(110, 51);
				char_literal16=(IToken)Match(input,27,Follow._27_in_enumDefinitionOptionalDeclaration494);  
				stream_27.Add(char_literal16);


				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(110, 56);
			char_literal17=(IToken)Match(input,34,Follow._34_in_enumDefinitionOptionalDeclaration497);  
			stream_34.Add(char_literal17);

			DebugLocation(110, 60);
			// PacketDescriptionLanguage.g:110:60: ( enumDeclaration )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==ID))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:110:60: enumDeclaration
				{
				DebugLocation(110, 60);
				PushFollow(Follow._enumDeclaration_in_enumDefinitionOptionalDeclaration499);
				enumDeclaration18=enumDeclaration();
				PopFollow();

				stream_enumDeclaration.Add(enumDeclaration18.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }



			{
			// AST REWRITE
			// elements: unsignedIntegerType, enumValues, enumDeclaration, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 110:77: -> ^( ENUM_DEFINITION ID ( unsignedIntegerType )? ( enumDeclaration )? ( enumValues )? )
			{
				DebugLocation(110, 80);
				// PacketDescriptionLanguage.g:110:80: ^( ENUM_DEFINITION ID ( unsignedIntegerType )? ( enumDeclaration )? ( enumValues )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(110, 82);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ENUM_DEFINITION, "ENUM_DEFINITION"), root_1);

				DebugLocation(110, 98);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(110, 101);
				// PacketDescriptionLanguage.g:110:101: ( unsignedIntegerType )?
				if (stream_unsignedIntegerType.HasNext)
				{
					DebugLocation(110, 101);
					adaptor.AddChild(root_1, stream_unsignedIntegerType.NextTree());

				}
				stream_unsignedIntegerType.Reset();
				DebugLocation(110, 122);
				// PacketDescriptionLanguage.g:110:122: ( enumDeclaration )?
				if (stream_enumDeclaration.HasNext)
				{
					DebugLocation(110, 122);
					adaptor.AddChild(root_1, stream_enumDeclaration.NextTree());

				}
				stream_enumDeclaration.Reset();
				DebugLocation(110, 139);
				// PacketDescriptionLanguage.g:110:139: ( enumValues )?
				if (stream_enumValues.HasNext)
				{
					DebugLocation(110, 139);
					adaptor.AddChild(root_1, stream_enumValues.NextTree());

				}
				stream_enumValues.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumDefinitionOptionalDeclaration", 6);
			LeaveRule("enumDefinitionOptionalDeclaration", 6);
			LeaveRule_enumDefinitionOptionalDeclaration();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "enumDefinitionOptionalDeclaration"); }
		return retval;

	}
	// $ANTLR end "enumDefinitionOptionalDeclaration"

	partial void EnterRule_enumDeclaration();
	partial void LeaveRule_enumDeclaration();
	// $ANTLR start "enumDeclaration"
	// PacketDescriptionLanguage.g:112:1: enumDeclaration : ID ';' -> ^( ENUM_DECLARATION ID ) ;
	[GrammarRule("enumDeclaration")]
	private AstParserRuleReturnScope<object, IToken> enumDeclaration()
	{
		EnterRule_enumDeclaration();
		EnterRule("enumDeclaration", 7);
		TraceIn("enumDeclaration", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID19 = default(IToken);
		IToken char_literal20 = default(IToken);

		object ID19_tree = default(object);
		object char_literal20_tree = default(object);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_28=new RewriteRuleITokenStream(adaptor,"token 28");
		try { DebugEnterRule(GrammarFileName, "enumDeclaration");
		DebugLocation(112, 1);
		try
		{
			// PacketDescriptionLanguage.g:113:2: ( ID ';' -> ^( ENUM_DECLARATION ID ) )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:113:4: ID ';'
			{
			DebugLocation(113, 4);
			ID19=(IToken)Match(input,ID,Follow._ID_in_enumDeclaration527);  
			stream_ID.Add(ID19);

			DebugLocation(113, 7);
			char_literal20=(IToken)Match(input,28,Follow._28_in_enumDeclaration529);  
			stream_28.Add(char_literal20);



			{
			// AST REWRITE
			// elements: ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 113:11: -> ^( ENUM_DECLARATION ID )
			{
				DebugLocation(113, 14);
				// PacketDescriptionLanguage.g:113:14: ^( ENUM_DECLARATION ID )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(113, 16);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ENUM_DECLARATION, "ENUM_DECLARATION"), root_1);

				DebugLocation(113, 33);
				adaptor.AddChild(root_1, stream_ID.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumDeclaration", 7);
			LeaveRule("enumDeclaration", 7);
			LeaveRule_enumDeclaration();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "enumDeclaration"); }
		return retval;

	}
	// $ANTLR end "enumDeclaration"

	partial void EnterRule_enumDefinition();
	partial void LeaveRule_enumDefinition();
	// $ANTLR start "enumDefinition"
	// PacketDescriptionLanguage.g:116:1: enumDefinition : 'enum' ( unsignedIntegerType )? ID '{' ( enumValues )? ( ',' )? '}' -> ^( ENUM_DEFINITION ID ( unsignedIntegerType )? ( enumValues )? ) ;
	[GrammarRule("enumDefinition")]
	private AstParserRuleReturnScope<object, IToken> enumDefinition()
	{
		EnterRule_enumDefinition();
		EnterRule("enumDefinition", 8);
		TraceIn("enumDefinition", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal21 = default(IToken);
		IToken ID23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal27 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unsignedIntegerType22 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> enumValues25 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal21_tree = default(object);
		object ID23_tree = default(object);
		object char_literal24_tree = default(object);
		object char_literal26_tree = default(object);
		object char_literal27_tree = default(object);
		RewriteRuleITokenStream stream_32=new RewriteRuleITokenStream(adaptor,"token 32");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
		RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");
		RewriteRuleITokenStream stream_27=new RewriteRuleITokenStream(adaptor,"token 27");
		RewriteRuleSubtreeStream stream_unsignedIntegerType=new RewriteRuleSubtreeStream(adaptor,"rule unsignedIntegerType");
		RewriteRuleSubtreeStream stream_enumValues=new RewriteRuleSubtreeStream(adaptor,"rule enumValues");
		try { DebugEnterRule(GrammarFileName, "enumDefinition");
		DebugLocation(116, 1);
		try
		{
			// PacketDescriptionLanguage.g:117:2: ( 'enum' ( unsignedIntegerType )? ID '{' ( enumValues )? ( ',' )? '}' -> ^( ENUM_DEFINITION ID ( unsignedIntegerType )? ( enumValues )? ) )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:117:4: 'enum' ( unsignedIntegerType )? ID '{' ( enumValues )? ( ',' )? '}'
			{
			DebugLocation(117, 4);
			string_literal21=(IToken)Match(input,32,Follow._32_in_enumDefinition548);  
			stream_32.Add(string_literal21);

			DebugLocation(117, 11);
			// PacketDescriptionLanguage.g:117:11: ( unsignedIntegerType )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==BYTE_TYPE||(LA6_1>=UINT_TYPE && LA6_1<=USHORT_TYPE)))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:117:11: unsignedIntegerType
				{
				DebugLocation(117, 11);
				PushFollow(Follow._unsignedIntegerType_in_enumDefinition550);
				unsignedIntegerType22=unsignedIntegerType();
				PopFollow();

				stream_unsignedIntegerType.Add(unsignedIntegerType22.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(117, 32);
			ID23=(IToken)Match(input,ID,Follow._ID_in_enumDefinition553);  
			stream_ID.Add(ID23);

			DebugLocation(117, 35);
			char_literal24=(IToken)Match(input,33,Follow._33_in_enumDefinition555);  
			stream_33.Add(char_literal24);

			DebugLocation(117, 39);
			// PacketDescriptionLanguage.g:117:39: ( enumValues )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==ID))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:117:39: enumValues
				{
				DebugLocation(117, 39);
				PushFollow(Follow._enumValues_in_enumDefinition557);
				enumValues25=enumValues();
				PopFollow();

				stream_enumValues.Add(enumValues25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(117, 51);
			// PacketDescriptionLanguage.g:117:51: ( ',' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==27))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:117:51: ','
				{
				DebugLocation(117, 51);
				char_literal26=(IToken)Match(input,27,Follow._27_in_enumDefinition560);  
				stream_27.Add(char_literal26);


				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(117, 56);
			char_literal27=(IToken)Match(input,34,Follow._34_in_enumDefinition563);  
			stream_34.Add(char_literal27);



			{
			// AST REWRITE
			// elements: enumValues, unsignedIntegerType, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 117:60: -> ^( ENUM_DEFINITION ID ( unsignedIntegerType )? ( enumValues )? )
			{
				DebugLocation(117, 63);
				// PacketDescriptionLanguage.g:117:63: ^( ENUM_DEFINITION ID ( unsignedIntegerType )? ( enumValues )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(117, 65);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ENUM_DEFINITION, "ENUM_DEFINITION"), root_1);

				DebugLocation(117, 81);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(117, 84);
				// PacketDescriptionLanguage.g:117:84: ( unsignedIntegerType )?
				if (stream_unsignedIntegerType.HasNext)
				{
					DebugLocation(117, 84);
					adaptor.AddChild(root_1, stream_unsignedIntegerType.NextTree());

				}
				stream_unsignedIntegerType.Reset();
				DebugLocation(117, 105);
				// PacketDescriptionLanguage.g:117:105: ( enumValues )?
				if (stream_enumValues.HasNext)
				{
					DebugLocation(117, 105);
					adaptor.AddChild(root_1, stream_enumValues.NextTree());

				}
				stream_enumValues.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumDefinition", 8);
			LeaveRule("enumDefinition", 8);
			LeaveRule_enumDefinition();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "enumDefinition"); }
		return retval;

	}
	// $ANTLR end "enumDefinition"

	partial void EnterRule_enumValues();
	partial void LeaveRule_enumValues();
	// $ANTLR start "enumValues"
	// PacketDescriptionLanguage.g:119:1: enumValues : enumValue ( anotherEnumValue )* ;
	[GrammarRule("enumValues")]
	private AstParserRuleReturnScope<object, IToken> enumValues()
	{
		EnterRule_enumValues();
		EnterRule("enumValues", 9);
		TraceIn("enumValues", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> enumValue28 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> anotherEnumValue29 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "enumValues");
		DebugLocation(119, 30);
		try
		{
			// PacketDescriptionLanguage.g:120:2: ( enumValue ( anotherEnumValue )* )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:120:4: enumValue ( anotherEnumValue )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(120, 4);
			PushFollow(Follow._enumValue_in_enumValues587);
			enumValue28=enumValue();
			PopFollow();

			adaptor.AddChild(root_0, enumValue28.Tree);
			DebugLocation(120, 14);
			// PacketDescriptionLanguage.g:120:14: ( anotherEnumValue )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==27))
				{
					int LA9_2 = input.LA(2);

					if ((LA9_2==ID))
					{
						alt9 = 1;
					}


				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// PacketDescriptionLanguage.g:120:14: anotherEnumValue
					{
					DebugLocation(120, 14);
					PushFollow(Follow._anotherEnumValue_in_enumValues589);
					anotherEnumValue29=anotherEnumValue();
					PopFollow();

					adaptor.AddChild(root_0, anotherEnumValue29.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumValues", 9);
			LeaveRule("enumValues", 9);
			LeaveRule_enumValues();
		}
		DebugLocation(120, 30);
		} finally { DebugExitRule(GrammarFileName, "enumValues"); }
		return retval;

	}
	// $ANTLR end "enumValues"

	partial void EnterRule_anotherEnumValue();
	partial void LeaveRule_anotherEnumValue();
	// $ANTLR start "anotherEnumValue"
	// PacketDescriptionLanguage.g:121:1: anotherEnumValue : ',' enumValue -> enumValue ;
	[GrammarRule("anotherEnumValue")]
	private AstParserRuleReturnScope<object, IToken> anotherEnumValue()
	{
		EnterRule_anotherEnumValue();
		EnterRule("anotherEnumValue", 10);
		TraceIn("anotherEnumValue", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal30 = default(IToken);
		AstParserRuleReturnScope<object, IToken> enumValue31 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal30_tree = default(object);
		RewriteRuleITokenStream stream_27=new RewriteRuleITokenStream(adaptor,"token 27");
		RewriteRuleSubtreeStream stream_enumValue=new RewriteRuleSubtreeStream(adaptor,"rule enumValue");
		try { DebugEnterRule(GrammarFileName, "anotherEnumValue");
		DebugLocation(121, 29);
		try
		{
			// PacketDescriptionLanguage.g:122:2: ( ',' enumValue -> enumValue )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:122:4: ',' enumValue
			{
			DebugLocation(122, 4);
			char_literal30=(IToken)Match(input,27,Follow._27_in_anotherEnumValue598);  
			stream_27.Add(char_literal30);

			DebugLocation(122, 8);
			PushFollow(Follow._enumValue_in_anotherEnumValue600);
			enumValue31=enumValue();
			PopFollow();

			stream_enumValue.Add(enumValue31.Tree);


			{
			// AST REWRITE
			// elements: enumValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 122:18: -> enumValue
			{
				DebugLocation(122, 21);
				adaptor.AddChild(root_0, stream_enumValue.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anotherEnumValue", 10);
			LeaveRule("anotherEnumValue", 10);
			LeaveRule_anotherEnumValue();
		}
		DebugLocation(122, 29);
		} finally { DebugExitRule(GrammarFileName, "anotherEnumValue"); }
		return retval;

	}
	// $ANTLR end "anotherEnumValue"

	partial void EnterRule_enumValue();
	partial void LeaveRule_enumValue();
	// $ANTLR start "enumValue"
	// PacketDescriptionLanguage.g:123:1: enumValue : ( ID -> ^( ID ) | ID '=' INTEGER -> ^( ID INTEGER ) );
	[GrammarRule("enumValue")]
	private AstParserRuleReturnScope<object, IToken> enumValue()
	{
		EnterRule_enumValue();
		EnterRule("enumValue", 11);
		TraceIn("enumValue", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID32 = default(IToken);
		IToken ID33 = default(IToken);
		IToken char_literal34 = default(IToken);
		IToken INTEGER35 = default(IToken);

		object ID32_tree = default(object);
		object ID33_tree = default(object);
		object char_literal34_tree = default(object);
		object INTEGER35_tree = default(object);
		RewriteRuleITokenStream stream_INTEGER=new RewriteRuleITokenStream(adaptor,"token INTEGER");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_29=new RewriteRuleITokenStream(adaptor,"token 29");
		try { DebugEnterRule(GrammarFileName, "enumValue");
		DebugLocation(123, 1);
		try
		{
			// PacketDescriptionLanguage.g:124:2: ( ID -> ^( ID ) | ID '=' INTEGER -> ^( ID INTEGER ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==ID))
			{
				int LA10_2 = input.LA(2);

				if ((LA10_2==29))
				{
					alt10 = 2;
				}
				else if ((LA10_2==27||LA10_2==34))
				{
					alt10 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:124:4: ID
				{
				DebugLocation(124, 4);
				ID32=(IToken)Match(input,ID,Follow._ID_in_enumValue612);  
				stream_ID.Add(ID32);



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 124:7: -> ^( ID )
				{
					DebugLocation(124, 10);
					// PacketDescriptionLanguage.g:124:10: ^( ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(124, 12);
					root_1 = (object)adaptor.BecomeRoot(stream_ID.NextNode(), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// PacketDescriptionLanguage.g:125:4: ID '=' INTEGER
				{
				DebugLocation(125, 4);
				ID33=(IToken)Match(input,ID,Follow._ID_in_enumValue623);  
				stream_ID.Add(ID33);

				DebugLocation(125, 7);
				char_literal34=(IToken)Match(input,29,Follow._29_in_enumValue625);  
				stream_29.Add(char_literal34);

				DebugLocation(125, 11);
				INTEGER35=(IToken)Match(input,INTEGER,Follow._INTEGER_in_enumValue627);  
				stream_INTEGER.Add(INTEGER35);



				{
				// AST REWRITE
				// elements: INTEGER, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 125:19: -> ^( ID INTEGER )
				{
					DebugLocation(125, 22);
					// PacketDescriptionLanguage.g:125:22: ^( ID INTEGER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(125, 24);
					root_1 = (object)adaptor.BecomeRoot(stream_ID.NextNode(), root_1);

					DebugLocation(125, 27);
					adaptor.AddChild(root_1, stream_INTEGER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumValue", 11);
			LeaveRule("enumValue", 11);
			LeaveRule_enumValue();
		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "enumValue"); }
		return retval;

	}
	// $ANTLR end "enumValue"

	partial void EnterRule_arrayLength();
	partial void LeaveRule_arrayLength();
	// $ANTLR start "arrayLength"
	// PacketDescriptionLanguage.g:129:1: arrayLength : ( INTEGER | unsignedIntegerType );
	[GrammarRule("arrayLength")]
	private AstParserRuleReturnScope<object, IToken> arrayLength()
	{
		EnterRule_arrayLength();
		EnterRule("arrayLength", 12);
		TraceIn("arrayLength", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken INTEGER36 = default(IToken);
		AstParserRuleReturnScope<object, IToken> unsignedIntegerType37 = default(AstParserRuleReturnScope<object, IToken>);

		object INTEGER36_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arrayLength");
		DebugLocation(129, 1);
		try
		{
			// PacketDescriptionLanguage.g:130:2: ( INTEGER | unsignedIntegerType )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==INTEGER))
			{
				alt11 = 1;
			}
			else if ((LA11_1==BYTE_TYPE||(LA11_1>=UINT_TYPE && LA11_1<=USHORT_TYPE)))
			{
				alt11 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:130:4: INTEGER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(130, 4);
				INTEGER36=(IToken)Match(input,INTEGER,Follow._INTEGER_in_arrayLength649); 
				INTEGER36_tree = (object)adaptor.Create(INTEGER36);
				adaptor.AddChild(root_0, INTEGER36_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// PacketDescriptionLanguage.g:131:4: unsignedIntegerType
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(131, 4);
				PushFollow(Follow._unsignedIntegerType_in_arrayLength655);
				unsignedIntegerType37=unsignedIntegerType();
				PopFollow();

				adaptor.AddChild(root_0, unsignedIntegerType37.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayLength", 12);
			LeaveRule("arrayLength", 12);
			LeaveRule_arrayLength();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "arrayLength"); }
		return retval;

	}
	// $ANTLR end "arrayLength"

	partial void EnterRule_packetDescriptionLanguage();
	partial void LeaveRule_packetDescriptionLanguage();
	// $ANTLR start "packetDescriptionLanguage"
	// PacketDescriptionLanguage.g:134:8: public packetDescriptionLanguage : ( globalDefinition )* EOF ;
	[GrammarRule("packetDescriptionLanguage")]
	public AstParserRuleReturnScope<object, IToken> packetDescriptionLanguage()
	{
		EnterRule_packetDescriptionLanguage();
		EnterRule("packetDescriptionLanguage", 13);
		TraceIn("packetDescriptionLanguage", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF39 = default(IToken);
		AstParserRuleReturnScope<object, IToken> globalDefinition38 = default(AstParserRuleReturnScope<object, IToken>);

		object EOF39_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "packetDescriptionLanguage");
		DebugLocation(134, 1);
		try
		{
			// PacketDescriptionLanguage.g:135:2: ( ( globalDefinition )* EOF )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:135:4: ( globalDefinition )* EOF
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(135, 4);
			// PacketDescriptionLanguage.g:135:4: ( globalDefinition )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==ID||LA12_1==32))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// PacketDescriptionLanguage.g:135:4: globalDefinition
					{
					DebugLocation(135, 4);
					PushFollow(Follow._globalDefinition_in_packetDescriptionLanguage669);
					globalDefinition38=globalDefinition();
					PopFollow();

					adaptor.AddChild(root_0, globalDefinition38.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(135, 22);
			EOF39=(IToken)Match(input,EOF,Follow._EOF_in_packetDescriptionLanguage672); 
			EOF39_tree = (object)adaptor.Create(EOF39);
			adaptor.AddChild(root_0, EOF39_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("packetDescriptionLanguage", 13);
			LeaveRule("packetDescriptionLanguage", 13);
			LeaveRule_packetDescriptionLanguage();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "packetDescriptionLanguage"); }
		return retval;

	}
	// $ANTLR end "packetDescriptionLanguage"

	partial void EnterRule_globalDefinition();
	partial void LeaveRule_globalDefinition();
	// $ANTLR start "globalDefinition"
	// PacketDescriptionLanguage.g:138:1: globalDefinition : ( enumDefinition | dataBlockDefinition );
	[GrammarRule("globalDefinition")]
	private AstParserRuleReturnScope<object, IToken> globalDefinition()
	{
		EnterRule_globalDefinition();
		EnterRule("globalDefinition", 14);
		TraceIn("globalDefinition", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> enumDefinition40 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> dataBlockDefinition41 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "globalDefinition");
		DebugLocation(138, 22);
		try
		{
			// PacketDescriptionLanguage.g:139:2: ( enumDefinition | dataBlockDefinition )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==32))
			{
				alt13 = 1;
			}
			else if ((LA13_1==ID))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:139:4: enumDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 4);
				PushFollow(Follow._enumDefinition_in_globalDefinition683);
				enumDefinition40=enumDefinition();
				PopFollow();

				adaptor.AddChild(root_0, enumDefinition40.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// PacketDescriptionLanguage.g:140:4: dataBlockDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 4);
				PushFollow(Follow._dataBlockDefinition_in_globalDefinition689);
				dataBlockDefinition41=dataBlockDefinition();
				PopFollow();

				adaptor.AddChild(root_0, dataBlockDefinition41.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("globalDefinition", 14);
			LeaveRule("globalDefinition", 14);
			LeaveRule_globalDefinition();
		}
		DebugLocation(140, 22);
		} finally { DebugExitRule(GrammarFileName, "globalDefinition"); }
		return retval;

	}
	// $ANTLR end "globalDefinition"

	partial void EnterRule_dataBlockDefinition();
	partial void LeaveRule_dataBlockDefinition();
	// $ANTLR start "dataBlockDefinition"
	// PacketDescriptionLanguage.g:142:1: dataBlockDefinition : ID '{' ( dataBlockField )* '}' -> ^( DATA_BLOCK_DEFINITION ID ( dataBlockField )* ) ;
	[GrammarRule("dataBlockDefinition")]
	private AstParserRuleReturnScope<object, IToken> dataBlockDefinition()
	{
		EnterRule_dataBlockDefinition();
		EnterRule("dataBlockDefinition", 15);
		TraceIn("dataBlockDefinition", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID42 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		AstParserRuleReturnScope<object, IToken> dataBlockField44 = default(AstParserRuleReturnScope<object, IToken>);

		object ID42_tree = default(object);
		object char_literal43_tree = default(object);
		object char_literal45_tree = default(object);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_33=new RewriteRuleITokenStream(adaptor,"token 33");
		RewriteRuleITokenStream stream_34=new RewriteRuleITokenStream(adaptor,"token 34");
		RewriteRuleSubtreeStream stream_dataBlockField=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockField");
		try { DebugEnterRule(GrammarFileName, "dataBlockDefinition");
		DebugLocation(142, 1);
		try
		{
			// PacketDescriptionLanguage.g:143:2: ( ID '{' ( dataBlockField )* '}' -> ^( DATA_BLOCK_DEFINITION ID ( dataBlockField )* ) )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:143:4: ID '{' ( dataBlockField )* '}'
			{
			DebugLocation(143, 4);
			ID42=(IToken)Match(input,ID,Follow._ID_in_dataBlockDefinition699);  
			stream_ID.Add(ID42);

			DebugLocation(143, 7);
			char_literal43=(IToken)Match(input,33,Follow._33_in_dataBlockDefinition701);  
			stream_33.Add(char_literal43);

			DebugLocation(143, 11);
			// PacketDescriptionLanguage.g:143:11: ( dataBlockField )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if (((LA14_1>=BIT_TYPE && LA14_1<=BYTE_TYPE)||LA14_1==DOUBLE_TYPE||LA14_1==FLOAT_TYPE||(LA14_1>=INT_TYPE && LA14_1<=SHORT_TYPE)||(LA14_1>=STRING_TYPE && LA14_1<=USHORT_TYPE)||LA14_1==30||LA14_1==32))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// PacketDescriptionLanguage.g:143:11: dataBlockField
					{
					DebugLocation(143, 11);
					PushFollow(Follow._dataBlockField_in_dataBlockDefinition703);
					dataBlockField44=dataBlockField();
					PopFollow();

					stream_dataBlockField.Add(dataBlockField44.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(143, 27);
			char_literal45=(IToken)Match(input,34,Follow._34_in_dataBlockDefinition706);  
			stream_34.Add(char_literal45);



			{
			// AST REWRITE
			// elements: dataBlockField, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 143:31: -> ^( DATA_BLOCK_DEFINITION ID ( dataBlockField )* )
			{
				DebugLocation(143, 34);
				// PacketDescriptionLanguage.g:143:34: ^( DATA_BLOCK_DEFINITION ID ( dataBlockField )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(143, 36);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DATA_BLOCK_DEFINITION, "DATA_BLOCK_DEFINITION"), root_1);

				DebugLocation(143, 58);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(143, 61);
				// PacketDescriptionLanguage.g:143:61: ( dataBlockField )*
				while ( stream_dataBlockField.HasNext )
				{
					DebugLocation(143, 61);
					adaptor.AddChild(root_1, stream_dataBlockField.NextTree());

				}
				stream_dataBlockField.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataBlockDefinition", 15);
			LeaveRule("dataBlockDefinition", 15);
			LeaveRule_dataBlockDefinition();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "dataBlockDefinition"); }
		return retval;

	}
	// $ANTLR end "dataBlockDefinition"

	partial void EnterRule_dataBlockField();
	partial void LeaveRule_dataBlockField();
	// $ANTLR start "dataBlockField"
	// PacketDescriptionLanguage.g:147:1: dataBlockField : ( enumDefinitionOptionalDeclaration | ( primitiveTypeModifier )* type ID ';' -> ^( SIMPLE_TYPE_FIELD type ID ( primitiveTypeModifier )* ) | type '[' arrayLength ']' ID ';' -> ^( ARRAY_TYPE_FIELD type ID arrayLength ) | '[' arrayLength ']' dataBlockDefinition -> ^( DATA_BLOCK_DEFINITION arrayLength dataBlockDefinition ) );
	[GrammarRule("dataBlockField")]
	private AstParserRuleReturnScope<object, IToken> dataBlockField()
	{
		EnterRule_dataBlockField();
		EnterRule("dataBlockField", 16);
		TraceIn("dataBlockField", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID49 = default(IToken);
		IToken char_literal50 = default(IToken);
		IToken char_literal52 = default(IToken);
		IToken char_literal54 = default(IToken);
		IToken ID55 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken char_literal59 = default(IToken);
		AstParserRuleReturnScope<object, IToken> enumDefinitionOptionalDeclaration46 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primitiveTypeModifier47 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type48 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> type51 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayLength53 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayLength58 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> dataBlockDefinition60 = default(AstParserRuleReturnScope<object, IToken>);

		object ID49_tree = default(object);
		object char_literal50_tree = default(object);
		object char_literal52_tree = default(object);
		object char_literal54_tree = default(object);
		object ID55_tree = default(object);
		object char_literal56_tree = default(object);
		object char_literal57_tree = default(object);
		object char_literal59_tree = default(object);
		RewriteRuleITokenStream stream_30=new RewriteRuleITokenStream(adaptor,"token 30");
		RewriteRuleITokenStream stream_31=new RewriteRuleITokenStream(adaptor,"token 31");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_28=new RewriteRuleITokenStream(adaptor,"token 28");
		RewriteRuleSubtreeStream stream_arrayLength=new RewriteRuleSubtreeStream(adaptor,"rule arrayLength");
		RewriteRuleSubtreeStream stream_dataBlockDefinition=new RewriteRuleSubtreeStream(adaptor,"rule dataBlockDefinition");
		RewriteRuleSubtreeStream stream_primitiveTypeModifier=new RewriteRuleSubtreeStream(adaptor,"rule primitiveTypeModifier");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		try { DebugEnterRule(GrammarFileName, "dataBlockField");
		DebugLocation(147, 1);
		try
		{
			// PacketDescriptionLanguage.g:148:2: ( enumDefinitionOptionalDeclaration | ( primitiveTypeModifier )* type ID ';' -> ^( SIMPLE_TYPE_FIELD type ID ( primitiveTypeModifier )* ) | type '[' arrayLength ']' ID ';' -> ^( ARRAY_TYPE_FIELD type ID arrayLength ) | '[' arrayLength ']' dataBlockDefinition -> ^( DATA_BLOCK_DEFINITION arrayLength dataBlockDefinition ) )
			int alt16=4;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case 32:
				{
				alt16 = 1;
				}
				break;
			case OPTIONAL_KEYWORD:
				{
				alt16 = 2;
				}
				break;
			case BIT_TYPE:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==ID))
				{
					alt16 = 2;
				}
				else if ((LA16_2==30))
				{
					alt16 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BYTE_TYPE:
			case UINT_TYPE:
			case ULONG_TYPE:
			case USHORT_TYPE:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==ID))
				{
					alt16 = 2;
				}
				else if ((LA16_2==30))
				{
					alt16 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT_TYPE:
			case LONG_TYPE:
			case SBYTE_TYPE:
			case SHORT_TYPE:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==ID))
				{
					alt16 = 2;
				}
				else if ((LA16_2==30))
				{
					alt16 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING_TYPE:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==ID))
				{
					alt16 = 2;
				}
				else if ((LA16_2==30))
				{
					alt16 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case DOUBLE_TYPE:
			case FLOAT_TYPE:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==ID))
				{
					alt16 = 2;
				}
				else if ((LA16_2==30))
				{
					alt16 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TYPE_ID:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==ID))
				{
					alt16 = 2;
				}
				else if ((LA16_2==30))
				{
					alt16 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 30:
				{
				alt16 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:148:4: enumDefinitionOptionalDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(148, 4);
				PushFollow(Follow._enumDefinitionOptionalDeclaration_in_dataBlockField729);
				enumDefinitionOptionalDeclaration46=enumDefinitionOptionalDeclaration();
				PopFollow();

				adaptor.AddChild(root_0, enumDefinitionOptionalDeclaration46.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// PacketDescriptionLanguage.g:149:4: ( primitiveTypeModifier )* type ID ';'
				{
				DebugLocation(149, 4);
				// PacketDescriptionLanguage.g:149:4: ( primitiveTypeModifier )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_1 = input.LA(1);

					if ((LA15_1==OPTIONAL_KEYWORD))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// PacketDescriptionLanguage.g:149:4: primitiveTypeModifier
						{
						DebugLocation(149, 4);
						PushFollow(Follow._primitiveTypeModifier_in_dataBlockField734);
						primitiveTypeModifier47=primitiveTypeModifier();
						PopFollow();

						stream_primitiveTypeModifier.Add(primitiveTypeModifier47.Tree);

						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }

				DebugLocation(149, 27);
				PushFollow(Follow._type_in_dataBlockField737);
				type48=type();
				PopFollow();

				stream_type.Add(type48.Tree);
				DebugLocation(149, 32);
				ID49=(IToken)Match(input,ID,Follow._ID_in_dataBlockField739);  
				stream_ID.Add(ID49);

				DebugLocation(149, 35);
				char_literal50=(IToken)Match(input,28,Follow._28_in_dataBlockField741);  
				stream_28.Add(char_literal50);



				{
				// AST REWRITE
				// elements: primitiveTypeModifier, type, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 149:39: -> ^( SIMPLE_TYPE_FIELD type ID ( primitiveTypeModifier )* )
				{
					DebugLocation(149, 42);
					// PacketDescriptionLanguage.g:149:42: ^( SIMPLE_TYPE_FIELD type ID ( primitiveTypeModifier )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(149, 44);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SIMPLE_TYPE_FIELD, "SIMPLE_TYPE_FIELD"), root_1);

					DebugLocation(149, 62);
					adaptor.AddChild(root_1, stream_type.NextTree());
					DebugLocation(149, 67);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(149, 70);
					// PacketDescriptionLanguage.g:149:70: ( primitiveTypeModifier )*
					while ( stream_primitiveTypeModifier.HasNext )
					{
						DebugLocation(149, 70);
						adaptor.AddChild(root_1, stream_primitiveTypeModifier.NextTree());

					}
					stream_primitiveTypeModifier.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// PacketDescriptionLanguage.g:150:4: type '[' arrayLength ']' ID ';'
				{
				DebugLocation(150, 4);
				PushFollow(Follow._type_in_dataBlockField759);
				type51=type();
				PopFollow();

				stream_type.Add(type51.Tree);
				DebugLocation(150, 9);
				char_literal52=(IToken)Match(input,30,Follow._30_in_dataBlockField761);  
				stream_30.Add(char_literal52);

				DebugLocation(150, 13);
				PushFollow(Follow._arrayLength_in_dataBlockField763);
				arrayLength53=arrayLength();
				PopFollow();

				stream_arrayLength.Add(arrayLength53.Tree);
				DebugLocation(150, 25);
				char_literal54=(IToken)Match(input,31,Follow._31_in_dataBlockField765);  
				stream_31.Add(char_literal54);

				DebugLocation(150, 29);
				ID55=(IToken)Match(input,ID,Follow._ID_in_dataBlockField767);  
				stream_ID.Add(ID55);

				DebugLocation(150, 32);
				char_literal56=(IToken)Match(input,28,Follow._28_in_dataBlockField769);  
				stream_28.Add(char_literal56);



				{
				// AST REWRITE
				// elements: arrayLength, type, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 150:36: -> ^( ARRAY_TYPE_FIELD type ID arrayLength )
				{
					DebugLocation(150, 39);
					// PacketDescriptionLanguage.g:150:39: ^( ARRAY_TYPE_FIELD type ID arrayLength )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(150, 41);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ARRAY_TYPE_FIELD, "ARRAY_TYPE_FIELD"), root_1);

					DebugLocation(150, 58);
					adaptor.AddChild(root_1, stream_type.NextTree());
					DebugLocation(150, 63);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(150, 66);
					adaptor.AddChild(root_1, stream_arrayLength.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// PacketDescriptionLanguage.g:151:4: '[' arrayLength ']' dataBlockDefinition
				{
				DebugLocation(151, 4);
				char_literal57=(IToken)Match(input,30,Follow._30_in_dataBlockField786);  
				stream_30.Add(char_literal57);

				DebugLocation(151, 8);
				PushFollow(Follow._arrayLength_in_dataBlockField788);
				arrayLength58=arrayLength();
				PopFollow();

				stream_arrayLength.Add(arrayLength58.Tree);
				DebugLocation(151, 20);
				char_literal59=(IToken)Match(input,31,Follow._31_in_dataBlockField790);  
				stream_31.Add(char_literal59);

				DebugLocation(151, 24);
				PushFollow(Follow._dataBlockDefinition_in_dataBlockField792);
				dataBlockDefinition60=dataBlockDefinition();
				PopFollow();

				stream_dataBlockDefinition.Add(dataBlockDefinition60.Tree);


				{
				// AST REWRITE
				// elements: arrayLength, dataBlockDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 151:44: -> ^( DATA_BLOCK_DEFINITION arrayLength dataBlockDefinition )
				{
					DebugLocation(151, 47);
					// PacketDescriptionLanguage.g:151:47: ^( DATA_BLOCK_DEFINITION arrayLength dataBlockDefinition )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(151, 49);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(DATA_BLOCK_DEFINITION, "DATA_BLOCK_DEFINITION"), root_1);

					DebugLocation(151, 71);
					adaptor.AddChild(root_1, stream_arrayLength.NextTree());
					DebugLocation(151, 83);
					adaptor.AddChild(root_1, stream_dataBlockDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataBlockField", 16);
			LeaveRule("dataBlockField", 16);
			LeaveRule_dataBlockField();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "dataBlockField"); }
		return retval;

	}
	// $ANTLR end "dataBlockField"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _OPTIONAL_KEYWORD_in_primitiveTypeModifier77 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BIT_TYPE_in_type333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unsignedIntegerType_in_type337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _signedIntegerType_in_type341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_TYPE_in_type345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _floatingPointType_in_type349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TYPE_ID_in_type353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_enumDefinitionOptionalDeclaration482 = new BitSet(new ulong[]{0x7004040UL});
		public static readonly BitSet _unsignedIntegerType_in_enumDefinitionOptionalDeclaration484 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _ID_in_enumDefinitionOptionalDeclaration487 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_enumDefinitionOptionalDeclaration489 = new BitSet(new ulong[]{0x408004000UL});
		public static readonly BitSet _enumValues_in_enumDefinitionOptionalDeclaration491 = new BitSet(new ulong[]{0x408000000UL});
		public static readonly BitSet _27_in_enumDefinitionOptionalDeclaration494 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_enumDefinitionOptionalDeclaration497 = new BitSet(new ulong[]{0x4002UL});
		public static readonly BitSet _enumDeclaration_in_enumDefinitionOptionalDeclaration499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_enumDeclaration527 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_enumDeclaration529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_enumDefinition548 = new BitSet(new ulong[]{0x7004040UL});
		public static readonly BitSet _unsignedIntegerType_in_enumDefinition550 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _ID_in_enumDefinition553 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_enumDefinition555 = new BitSet(new ulong[]{0x408004000UL});
		public static readonly BitSet _enumValues_in_enumDefinition557 = new BitSet(new ulong[]{0x408000000UL});
		public static readonly BitSet _27_in_enumDefinition560 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _34_in_enumDefinition563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumValue_in_enumValues587 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _anotherEnumValue_in_enumValues589 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_anotherEnumValue598 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _enumValue_in_anotherEnumValue600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_enumValue612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_enumValue623 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_enumValue625 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _INTEGER_in_enumValue627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTEGER_in_arrayLength649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unsignedIntegerType_in_arrayLength655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _globalDefinition_in_packetDescriptionLanguage669 = new BitSet(new ulong[]{0x100004000UL});
		public static readonly BitSet _EOF_in_packetDescriptionLanguage672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDefinition_in_globalDefinition683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _dataBlockDefinition_in_globalDefinition689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_dataBlockDefinition699 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _33_in_dataBlockDefinition701 = new BitSet(new ulong[]{0x547DF2260UL});
		public static readonly BitSet _dataBlockField_in_dataBlockDefinition703 = new BitSet(new ulong[]{0x547DF2260UL});
		public static readonly BitSet _34_in_dataBlockDefinition706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDefinitionOptionalDeclaration_in_dataBlockField729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveTypeModifier_in_dataBlockField734 = new BitSet(new ulong[]{0x7DF2260UL});
		public static readonly BitSet _type_in_dataBlockField737 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _ID_in_dataBlockField739 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_dataBlockField741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_dataBlockField759 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_dataBlockField761 = new BitSet(new ulong[]{0x7008040UL});
		public static readonly BitSet _arrayLength_in_dataBlockField763 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_dataBlockField765 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _ID_in_dataBlockField767 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _28_in_dataBlockField769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_dataBlockField786 = new BitSet(new ulong[]{0x7008040UL});
		public static readonly BitSet _arrayLength_in_dataBlockField788 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_dataBlockField790 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _dataBlockDefinition_in_dataBlockField792 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace Marler.Pdl
