//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 PacketDescriptionLanguage.g 2013-03-26 10:08:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace Marler.Pdl
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class PacketDescriptionLanguageLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int ARRAY_TYPE_FIELD=4;
	public const int BIT_TYPE=5;
	public const int BYTE_TYPE=6;
	public const int COMMENT=7;
	public const int DATA_BLOCK_DEFINITION=8;
	public const int DOUBLE_TYPE=9;
	public const int ENUM_DECLARATION=10;
	public const int ENUM_DEFINITION=11;
	public const int EXPONENT=12;
	public const int FLOAT_TYPE=13;
	public const int ID=14;
	public const int INTEGER=15;
	public const int INT_TYPE=16;
	public const int LONG_TYPE=17;
	public const int OPTIONAL_KEYWORD=18;
	public const int SBYTE_TYPE=19;
	public const int SHORT_TYPE=20;
	public const int SIMPLE_TYPE_FIELD=21;
	public const int STRING_TYPE=22;
	public const int TYPE_ID=23;
	public const int UINT_TYPE=24;
	public const int ULONG_TYPE=25;
	public const int USHORT_TYPE=26;

    // delegates
    // delegators

	public PacketDescriptionLanguageLexer()
	{
		OnCreated();
	}

	public PacketDescriptionLanguageLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public PacketDescriptionLanguageLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "PacketDescriptionLanguage.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 1);
		TraceIn("T__27", 1);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:9:7: ( ',' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:9:9: ','
			{
			DebugLocation(9, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 1);
			LeaveRule("T__27", 1);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 2);
		TraceIn("T__28", 2);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:10:7: ( ';' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:10:9: ';'
			{
			DebugLocation(10, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 2);
			LeaveRule("T__28", 2);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 3);
		TraceIn("T__29", 3);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:11:7: ( '=' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:11:9: '='
			{
			DebugLocation(11, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 3);
			LeaveRule("T__29", 3);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 4);
		TraceIn("T__30", 4);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:12:7: ( '[' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:12:9: '['
			{
			DebugLocation(12, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 4);
			LeaveRule("T__30", 4);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 5);
		TraceIn("T__31", 5);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:13:7: ( ']' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:13:9: ']'
			{
			DebugLocation(13, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 5);
			LeaveRule("T__31", 5);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 6);
		TraceIn("T__32", 6);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:14:7: ( 'enum' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:14:9: 'enum'
			{
			DebugLocation(14, 9);
			Match("enum"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 6);
			LeaveRule("T__32", 6);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 7);
		TraceIn("T__33", 7);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:15:7: ( '{' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:15:9: '{'
			{
			DebugLocation(15, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 7);
			LeaveRule("T__33", 7);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 8);
		TraceIn("T__34", 8);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:16:7: ( '}' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:16:9: '}'
			{
			DebugLocation(16, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 8);
			LeaveRule("T__34", 8);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_OPTIONAL_KEYWORD();
	partial void LeaveRule_OPTIONAL_KEYWORD();

	// $ANTLR start "OPTIONAL_KEYWORD"
	[GrammarRule("OPTIONAL_KEYWORD")]
	private void mOPTIONAL_KEYWORD()
	{
		EnterRule_OPTIONAL_KEYWORD();
		EnterRule("OPTIONAL_KEYWORD", 9);
		TraceIn("OPTIONAL_KEYWORD", 9);
		try
		{
			int _type = OPTIONAL_KEYWORD;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:23:2: ( 'optional' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:23:3: 'optional'
			{
			DebugLocation(23, 3);
			Match("optional"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPTIONAL_KEYWORD", 9);
			LeaveRule("OPTIONAL_KEYWORD", 9);
			LeaveRule_OPTIONAL_KEYWORD();
		}
	}
	// $ANTLR end "OPTIONAL_KEYWORD"

	partial void EnterRule_BIT_TYPE();
	partial void LeaveRule_BIT_TYPE();

	// $ANTLR start "BIT_TYPE"
	[GrammarRule("BIT_TYPE")]
	private void mBIT_TYPE()
	{
		EnterRule_BIT_TYPE();
		EnterRule("BIT_TYPE", 10);
		TraceIn("BIT_TYPE", 10);
		try
		{
			int _type = BIT_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:33:2: ( 'bit' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:33:4: 'bit'
			{
			DebugLocation(33, 4);
			Match("bit"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIT_TYPE", 10);
			LeaveRule("BIT_TYPE", 10);
			LeaveRule_BIT_TYPE();
		}
	}
	// $ANTLR end "BIT_TYPE"

	partial void EnterRule_BYTE_TYPE();
	partial void LeaveRule_BYTE_TYPE();

	// $ANTLR start "BYTE_TYPE"
	[GrammarRule("BYTE_TYPE")]
	private void mBYTE_TYPE()
	{
		EnterRule_BYTE_TYPE();
		EnterRule("BYTE_TYPE", 11);
		TraceIn("BYTE_TYPE", 11);
		try
		{
			int _type = BYTE_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:36:2: ( 'byte' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:36:3: 'byte'
			{
			DebugLocation(36, 3);
			Match("byte"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BYTE_TYPE", 11);
			LeaveRule("BYTE_TYPE", 11);
			LeaveRule_BYTE_TYPE();
		}
	}
	// $ANTLR end "BYTE_TYPE"

	partial void EnterRule_USHORT_TYPE();
	partial void LeaveRule_USHORT_TYPE();

	// $ANTLR start "USHORT_TYPE"
	[GrammarRule("USHORT_TYPE")]
	private void mUSHORT_TYPE()
	{
		EnterRule_USHORT_TYPE();
		EnterRule("USHORT_TYPE", 12);
		TraceIn("USHORT_TYPE", 12);
		try
		{
			int _type = USHORT_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:38:2: ( 'ushort' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:38:3: 'ushort'
			{
			DebugLocation(38, 3);
			Match("ushort"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("USHORT_TYPE", 12);
			LeaveRule("USHORT_TYPE", 12);
			LeaveRule_USHORT_TYPE();
		}
	}
	// $ANTLR end "USHORT_TYPE"

	partial void EnterRule_UINT_TYPE();
	partial void LeaveRule_UINT_TYPE();

	// $ANTLR start "UINT_TYPE"
	[GrammarRule("UINT_TYPE")]
	private void mUINT_TYPE()
	{
		EnterRule_UINT_TYPE();
		EnterRule("UINT_TYPE", 13);
		TraceIn("UINT_TYPE", 13);
		try
		{
			int _type = UINT_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:40:2: ( 'uint' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:40:3: 'uint'
			{
			DebugLocation(40, 3);
			Match("uint"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UINT_TYPE", 13);
			LeaveRule("UINT_TYPE", 13);
			LeaveRule_UINT_TYPE();
		}
	}
	// $ANTLR end "UINT_TYPE"

	partial void EnterRule_ULONG_TYPE();
	partial void LeaveRule_ULONG_TYPE();

	// $ANTLR start "ULONG_TYPE"
	[GrammarRule("ULONG_TYPE")]
	private void mULONG_TYPE()
	{
		EnterRule_ULONG_TYPE();
		EnterRule("ULONG_TYPE", 14);
		TraceIn("ULONG_TYPE", 14);
		try
		{
			int _type = ULONG_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:42:2: ( 'ulong' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:42:3: 'ulong'
			{
			DebugLocation(42, 3);
			Match("ulong"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ULONG_TYPE", 14);
			LeaveRule("ULONG_TYPE", 14);
			LeaveRule_ULONG_TYPE();
		}
	}
	// $ANTLR end "ULONG_TYPE"

	partial void EnterRule_SBYTE_TYPE();
	partial void LeaveRule_SBYTE_TYPE();

	// $ANTLR start "SBYTE_TYPE"
	[GrammarRule("SBYTE_TYPE")]
	private void mSBYTE_TYPE()
	{
		EnterRule_SBYTE_TYPE();
		EnterRule("SBYTE_TYPE", 15);
		TraceIn("SBYTE_TYPE", 15);
		try
		{
			int _type = SBYTE_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:47:2: ( 'sbyte' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:47:3: 'sbyte'
			{
			DebugLocation(47, 3);
			Match("sbyte"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SBYTE_TYPE", 15);
			LeaveRule("SBYTE_TYPE", 15);
			LeaveRule_SBYTE_TYPE();
		}
	}
	// $ANTLR end "SBYTE_TYPE"

	partial void EnterRule_SHORT_TYPE();
	partial void LeaveRule_SHORT_TYPE();

	// $ANTLR start "SHORT_TYPE"
	[GrammarRule("SHORT_TYPE")]
	private void mSHORT_TYPE()
	{
		EnterRule_SHORT_TYPE();
		EnterRule("SHORT_TYPE", 16);
		TraceIn("SHORT_TYPE", 16);
		try
		{
			int _type = SHORT_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:49:2: ( 'short' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:49:3: 'short'
			{
			DebugLocation(49, 3);
			Match("short"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHORT_TYPE", 16);
			LeaveRule("SHORT_TYPE", 16);
			LeaveRule_SHORT_TYPE();
		}
	}
	// $ANTLR end "SHORT_TYPE"

	partial void EnterRule_INT_TYPE();
	partial void LeaveRule_INT_TYPE();

	// $ANTLR start "INT_TYPE"
	[GrammarRule("INT_TYPE")]
	private void mINT_TYPE()
	{
		EnterRule_INT_TYPE();
		EnterRule("INT_TYPE", 17);
		TraceIn("INT_TYPE", 17);
		try
		{
			int _type = INT_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:51:2: ( 'int' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:51:3: 'int'
			{
			DebugLocation(51, 3);
			Match("int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT_TYPE", 17);
			LeaveRule("INT_TYPE", 17);
			LeaveRule_INT_TYPE();
		}
	}
	// $ANTLR end "INT_TYPE"

	partial void EnterRule_LONG_TYPE();
	partial void LeaveRule_LONG_TYPE();

	// $ANTLR start "LONG_TYPE"
	[GrammarRule("LONG_TYPE")]
	private void mLONG_TYPE()
	{
		EnterRule_LONG_TYPE();
		EnterRule("LONG_TYPE", 18);
		TraceIn("LONG_TYPE", 18);
		try
		{
			int _type = LONG_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:53:2: ( 'long' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:53:3: 'long'
			{
			DebugLocation(53, 3);
			Match("long"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LONG_TYPE", 18);
			LeaveRule("LONG_TYPE", 18);
			LeaveRule_LONG_TYPE();
		}
	}
	// $ANTLR end "LONG_TYPE"

	partial void EnterRule_FLOAT_TYPE();
	partial void LeaveRule_FLOAT_TYPE();

	// $ANTLR start "FLOAT_TYPE"
	[GrammarRule("FLOAT_TYPE")]
	private void mFLOAT_TYPE()
	{
		EnterRule_FLOAT_TYPE();
		EnterRule("FLOAT_TYPE", 19);
		TraceIn("FLOAT_TYPE", 19);
		try
		{
			int _type = FLOAT_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:59:2: ( 'float' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:59:3: 'float'
			{
			DebugLocation(59, 3);
			Match("float"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT_TYPE", 19);
			LeaveRule("FLOAT_TYPE", 19);
			LeaveRule_FLOAT_TYPE();
		}
	}
	// $ANTLR end "FLOAT_TYPE"

	partial void EnterRule_DOUBLE_TYPE();
	partial void LeaveRule_DOUBLE_TYPE();

	// $ANTLR start "DOUBLE_TYPE"
	[GrammarRule("DOUBLE_TYPE")]
	private void mDOUBLE_TYPE()
	{
		EnterRule_DOUBLE_TYPE();
		EnterRule("DOUBLE_TYPE", 20);
		TraceIn("DOUBLE_TYPE", 20);
		try
		{
			int _type = DOUBLE_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:61:2: ( 'double' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:61:3: 'double'
			{
			DebugLocation(61, 3);
			Match("double"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLE_TYPE", 20);
			LeaveRule("DOUBLE_TYPE", 20);
			LeaveRule_DOUBLE_TYPE();
		}
	}
	// $ANTLR end "DOUBLE_TYPE"

	partial void EnterRule_STRING_TYPE();
	partial void LeaveRule_STRING_TYPE();

	// $ANTLR start "STRING_TYPE"
	[GrammarRule("STRING_TYPE")]
	private void mSTRING_TYPE()
	{
		EnterRule_STRING_TYPE();
		EnterRule("STRING_TYPE", 21);
		TraceIn("STRING_TYPE", 21);
		try
		{
			int _type = STRING_TYPE;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:67:2: ( 'ascii' )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:67:3: 'ascii'
			{
			DebugLocation(67, 3);
			Match("ascii"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_TYPE", 21);
			LeaveRule("STRING_TYPE", 21);
			LeaveRule_STRING_TYPE();
		}
	}
	// $ANTLR end "STRING_TYPE"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 22);
		TraceIn("ID", 22);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:71:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:71:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(71, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(71, 31);
			// PacketDescriptionLanguage.g:71:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// PacketDescriptionLanguage.g:
					{
					DebugLocation(71, 31);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 22);
			LeaveRule("ID", 22);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_TYPE_ID();
	partial void LeaveRule_TYPE_ID();

	// $ANTLR start "TYPE_ID"
	[GrammarRule("TYPE_ID")]
	private void mTYPE_ID()
	{
		EnterRule_TYPE_ID();
		EnterRule("TYPE_ID", 23);
		TraceIn("TYPE_ID", 23);
		try
		{
			int _type = TYPE_ID;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:74:9: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '.' )* )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:74:10: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '.' )*
			{
			DebugLocation(74, 10);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(74, 33);
			// PacketDescriptionLanguage.g:74:33: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | '.' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1=='.'||(LA2_1>='0' && LA2_1<='9')||(LA2_1>='A' && LA2_1<='Z')||LA2_1=='_'||(LA2_1>='a' && LA2_1<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// PacketDescriptionLanguage.g:
					{
					DebugLocation(74, 33);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE_ID", 23);
			LeaveRule("TYPE_ID", 23);
			LeaveRule_TYPE_ID();
		}
	}
	// $ANTLR end "TYPE_ID"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 24);
		TraceIn("INTEGER", 24);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:95:2: ( ( '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:95:3: ( '-' )? ( '0' .. '9' )+
			{
			DebugLocation(95, 3);
			// PacketDescriptionLanguage.g:95:3: ( '-' )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1=='-'))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:95:3: '-'
				{
				DebugLocation(95, 3);
				Match('-'); 

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(95, 8);
			// PacketDescriptionLanguage.g:95:8: ( '0' .. '9' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='0' && LA4_1<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// PacketDescriptionLanguage.g:
					{
					DebugLocation(95, 8);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 24);
			LeaveRule("INTEGER", 24);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 25);
		TraceIn("COMMENT", 25);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// PacketDescriptionLanguage.g:99:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1=='/'))
			{
				int LA8_2 = input.LA(2);

				if ((LA8_2=='/'))
				{
					alt8 = 1;
				}
				else if ((LA8_2=='*'))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:99:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
				{
				DebugLocation(99, 9);
				Match("//"); 

				DebugLocation(99, 14);
				// PacketDescriptionLanguage.g:99:14: (~ ( '\\n' | '\\r' ) )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if (((LA5_1>='\u0000' && LA5_1<='\t')||(LA5_1>='\u000B' && LA5_1<='\f')||(LA5_1>='\u000E' && LA5_1<='\uFFFF')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// PacketDescriptionLanguage.g:
						{
						DebugLocation(99, 14);
						input.Consume();


						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(99, 28);
				// PacketDescriptionLanguage.g:99:28: ( '\\r' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='\r'))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// PacketDescriptionLanguage.g:99:28: '\\r'
					{
					DebugLocation(99, 28);
					Match('\r'); 

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(99, 34);
				Match('\n'); 
				DebugLocation(99, 39);
				_channel=Hidden;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// PacketDescriptionLanguage.g:100:9: '/*' ( options {greedy=false; } : . )* '*/'
				{
				DebugLocation(100, 9);
				Match("/*"); 

				DebugLocation(100, 14);
				// PacketDescriptionLanguage.g:100:14: ( options {greedy=false; } : . )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1=='*'))
					{
						int LA7_2 = input.LA(2);

						if ((LA7_2=='/'))
						{
							alt7 = 2;
						}
						else if (((LA7_2>='\u0000' && LA7_2<='.')||(LA7_2>='0' && LA7_2<='\uFFFF')))
						{
							alt7 = 1;
						}


					}
					else if (((LA7_1>='\u0000' && LA7_1<=')')||(LA7_1>='+' && LA7_1<='\uFFFF')))
					{
						alt7 = 1;
					}


					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// PacketDescriptionLanguage.g:100:42: .
						{
						DebugLocation(100, 42);
						MatchAny(); 

						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(100, 47);
				Match("*/"); 

				DebugLocation(100, 52);
                _channel = Hidden;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 25);
			LeaveRule("COMMENT", 25);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 26);
		TraceIn("EXPONENT", 26);
		try
		{
			// PacketDescriptionLanguage.g:105:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:105:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(105, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(105, 22);
			// PacketDescriptionLanguage.g:105:22: ( '+' | '-' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1=='+'||LA9_1=='-'))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// PacketDescriptionLanguage.g:
				{
				DebugLocation(105, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(105, 33);
			// PacketDescriptionLanguage.g:105:33: ( '0' .. '9' )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if (((LA10_1>='0' && LA10_1<='9')))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// PacketDescriptionLanguage.g:
					{
					DebugLocation(105, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 26);
			LeaveRule("EXPONENT", 26);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	public override void mTokens()
	{
		// PacketDescriptionLanguage.g:1:8: ( T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | OPTIONAL_KEYWORD | BIT_TYPE | BYTE_TYPE | USHORT_TYPE | UINT_TYPE | ULONG_TYPE | SBYTE_TYPE | SHORT_TYPE | INT_TYPE | LONG_TYPE | FLOAT_TYPE | DOUBLE_TYPE | STRING_TYPE | ID | TYPE_ID | INTEGER | COMMENT )
		int alt11=25;
		try { DebugEnterDecision(11, false);
		try
		{
			alt11 = dfa11.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(11); }
		switch (alt11)
		{
		case 1:
			DebugEnterAlt(1);
			// PacketDescriptionLanguage.g:1:10: T__27
			{
			DebugLocation(1, 10);
			mT__27(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// PacketDescriptionLanguage.g:1:16: T__28
			{
			DebugLocation(1, 16);
			mT__28(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// PacketDescriptionLanguage.g:1:22: T__29
			{
			DebugLocation(1, 22);
			mT__29(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// PacketDescriptionLanguage.g:1:28: T__30
			{
			DebugLocation(1, 28);
			mT__30(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// PacketDescriptionLanguage.g:1:34: T__31
			{
			DebugLocation(1, 34);
			mT__31(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// PacketDescriptionLanguage.g:1:40: T__32
			{
			DebugLocation(1, 40);
			mT__32(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// PacketDescriptionLanguage.g:1:46: T__33
			{
			DebugLocation(1, 46);
			mT__33(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// PacketDescriptionLanguage.g:1:52: T__34
			{
			DebugLocation(1, 52);
			mT__34(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// PacketDescriptionLanguage.g:1:58: OPTIONAL_KEYWORD
			{
			DebugLocation(1, 58);
			mOPTIONAL_KEYWORD(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// PacketDescriptionLanguage.g:1:75: BIT_TYPE
			{
			DebugLocation(1, 75);
			mBIT_TYPE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// PacketDescriptionLanguage.g:1:84: BYTE_TYPE
			{
			DebugLocation(1, 84);
			mBYTE_TYPE(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// PacketDescriptionLanguage.g:1:94: USHORT_TYPE
			{
			DebugLocation(1, 94);
			mUSHORT_TYPE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// PacketDescriptionLanguage.g:1:106: UINT_TYPE
			{
			DebugLocation(1, 106);
			mUINT_TYPE(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// PacketDescriptionLanguage.g:1:116: ULONG_TYPE
			{
			DebugLocation(1, 116);
			mULONG_TYPE(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// PacketDescriptionLanguage.g:1:127: SBYTE_TYPE
			{
			DebugLocation(1, 127);
			mSBYTE_TYPE(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// PacketDescriptionLanguage.g:1:138: SHORT_TYPE
			{
			DebugLocation(1, 138);
			mSHORT_TYPE(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// PacketDescriptionLanguage.g:1:149: INT_TYPE
			{
			DebugLocation(1, 149);
			mINT_TYPE(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// PacketDescriptionLanguage.g:1:158: LONG_TYPE
			{
			DebugLocation(1, 158);
			mLONG_TYPE(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// PacketDescriptionLanguage.g:1:168: FLOAT_TYPE
			{
			DebugLocation(1, 168);
			mFLOAT_TYPE(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// PacketDescriptionLanguage.g:1:179: DOUBLE_TYPE
			{
			DebugLocation(1, 179);
			mDOUBLE_TYPE(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// PacketDescriptionLanguage.g:1:191: STRING_TYPE
			{
			DebugLocation(1, 191);
			mSTRING_TYPE(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// PacketDescriptionLanguage.g:1:203: ID
			{
			DebugLocation(1, 203);
			mID(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// PacketDescriptionLanguage.g:1:206: TYPE_ID
			{
			DebugLocation(1, 206);
			mTYPE_ID(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// PacketDescriptionLanguage.g:1:214: INTEGER
			{
			DebugLocation(1, 214);
			mINTEGER(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// PacketDescriptionLanguage.g:1:222: COMMENT
			{
			DebugLocation(1, 222);
			mCOMMENT(); 

			}
			break;

		}

	}


	#region DFA
	DFA11 dfa11;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa11 = new DFA11(this);
	}

	private class DFA11 : DFA
	{
		private const string DFA11_eotS =
			"\x6\xFFFF\x1\x17\x2\xFFFF\xA\x17\x2\xFFFF\x2\x17\x2\xFFFF\xF\x17\x1\x36"+
			"\x6\x17\x1\x3D\x4\x17\x1\x42\x1\x17\x1\xFFFF\x1\x44\x1\x17\x1\x46\x3"+
			"\x17\x1\xFFFF\x1\x4A\x3\x17\x1\xFFFF\x1\x17\x1\xFFFF\x1\x17\x1\xFFFF"+
			"\x1\x50\x1\x51\x1\x52\x1\xFFFF\x1\x53\x1\x17\x1\x55\x1\x17\x1\x57\x4"+
			"\xFFFF\x1\x58\x1\xFFFF\x1\x17\x2\xFFFF\x1\x5A\x1\xFFFF";
		private const string DFA11_eofS =
			"\x5B\xFFFF";
		private const string DFA11_minS =
			"\x1\x2C\x5\xFFFF\x1\x2E\x2\xFFFF\xA\x2E\x2\xFFFF\x2\x2E\x2\xFFFF\x1D"+
			"\x2E\x1\xFFFF\x6\x2E\x1\xFFFF\x4\x2E\x1\xFFFF\x1\x2E\x1\xFFFF\x1\x2E"+
			"\x1\xFFFF\x3\x2E\x1\xFFFF\x5\x2E\x4\xFFFF\x1\x2E\x1\xFFFF\x1\x2E\x2\xFFFF"+
			"\x1\x2E\x1\xFFFF";
		private const string DFA11_maxS =
			"\x1\x7D\x5\xFFFF\x1\x7A\x2\xFFFF\xA\x7A\x2\xFFFF\x2\x7A\x2\xFFFF\x1D"+
			"\x7A\x1\xFFFF\x6\x7A\x1\xFFFF\x4\x7A\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x7A"+
			"\x1\xFFFF\x3\x7A\x1\xFFFF\x5\x7A\x4\xFFFF\x1\x7A\x1\xFFFF\x1\x7A\x2\xFFFF"+
			"\x1\x7A\x1\xFFFF";
		private const string DFA11_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x7\x1\x8\xA\xFFFF"+
			"\x1\x18\x1\x19\x2\xFFFF\x1\x16\x1\x17\x1D\xFFFF\x1\xA\x6\xFFFF\x1\x11"+
			"\x4\xFFFF\x1\x6\x1\xFFFF\x1\xB\x1\xFFFF\x1\xD\x3\xFFFF\x1\x12\x5\xFFFF"+
			"\x1\xE\x1\xF\x1\x10\x1\x13\x1\xFFFF\x1\x15\x1\xFFFF\x1\xC\x1\x14\x1\xFFFF"+
			"\x1\x9";
		private const string DFA11_specialS =
			"\x5B\xFFFF}>";
		private static readonly string[] DFA11_transitionS =
			{
				"\x1\x1\x1\x13\x1\xFFFF\x1\x14\xA\x13\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1A\x12\x1\x4\x1\xFFFF\x1\x5\x1\xFFFF\x1\x12\x1\xFFFF\x1\x11"+
				"\x1\xA\x1\x12\x1\x10\x1\x6\x1\xF\x2\x12\x1\xD\x2\x12\x1\xE\x2\x12\x1"+
				"\x9\x3\x12\x1\xC\x1\x12\x1\xB\x5\x12\x1\x7\x1\xFFFF\x1\x8",
				"",
				"",
				"",
				"",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xD"+
				"\x16\x1\x15\xC\x16",
				"",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xF"+
				"\x16\x1\x19\xA\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x8"+
				"\x16\x1\x1A\xF\x16\x1\x1B\x1\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x8"+
				"\x16\x1\x1D\x2\x16\x1\x1E\x6\x16\x1\x1C\x7\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1"+
				"\x16\x1\x1F\x5\x16\x1\x20\x12\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xD"+
				"\x16\x1\x21\xC\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xE"+
				"\x16\x1\x22\xB\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xB"+
				"\x16\x1\x23\xE\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xE"+
				"\x16\x1\x24\xB\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x12"+
				"\x16\x1\x25\x7\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x14"+
				"\x16\x1\x26\x5\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x13"+
				"\x16\x1\x27\x6\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x13"+
				"\x16\x1\x28\x6\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x13"+
				"\x16\x1\x29\x6\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x7"+
				"\x16\x1\x2A\x12\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xD"+
				"\x16\x1\x2B\xC\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xE"+
				"\x16\x1\x2C\xB\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x18"+
				"\x16\x1\x2D\x1\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xE"+
				"\x16\x1\x2E\xB\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x13"+
				"\x16\x1\x2F\x6\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xD"+
				"\x16\x1\x30\xC\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xE"+
				"\x16\x1\x31\xB\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x14"+
				"\x16\x1\x32\x5\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x2"+
				"\x16\x1\x33\x17\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xC"+
				"\x16\x1\x34\xD\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x8"+
				"\x16\x1\x35\x11\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x4"+
				"\x16\x1\x37\x15\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xE"+
				"\x16\x1\x38\xB\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x13"+
				"\x16\x1\x39\x6\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xD"+
				"\x16\x1\x3A\xC\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x13"+
				"\x16\x1\x3B\x6\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x11"+
				"\x16\x1\x3C\x8\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x6"+
				"\x16\x1\x3E\x13\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1"+
				"\x3F\x19\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1"+
				"\x16\x1\x40\x18\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x8"+
				"\x16\x1\x41\x11\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xE"+
				"\x16\x1\x43\xB\x16",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x11"+
				"\x16\x1\x45\x8\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x6"+
				"\x16\x1\x47\x13\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x4"+
				"\x16\x1\x48\x15\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x13"+
				"\x16\x1\x49\x6\x16",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x13"+
				"\x16\x1\x4B\x6\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xB"+
				"\x16\x1\x4C\xE\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x8"+
				"\x16\x1\x4D\x11\x16",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xD"+
				"\x16\x1\x4E\xC\x16",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x13"+
				"\x16\x1\x4F\x6\x16",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x4"+
				"\x16\x1\x54\x15\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1"+
				"\x56\x19\x16",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"",
				"",
				"",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\xB"+
				"\x16\x1\x59\xE\x16",
				"",
				"",
				"\x1\x18\x1\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				""
			};

		private static readonly short[] DFA11_eot = DFA.UnpackEncodedString(DFA11_eotS);
		private static readonly short[] DFA11_eof = DFA.UnpackEncodedString(DFA11_eofS);
		private static readonly char[] DFA11_min = DFA.UnpackEncodedStringToUnsignedChars(DFA11_minS);
		private static readonly char[] DFA11_max = DFA.UnpackEncodedStringToUnsignedChars(DFA11_maxS);
		private static readonly short[] DFA11_accept = DFA.UnpackEncodedString(DFA11_acceptS);
		private static readonly short[] DFA11_special = DFA.UnpackEncodedString(DFA11_specialS);
		private static readonly short[][] DFA11_transition;

		static DFA11()
		{
			int numStates = DFA11_transitionS.Length;
			DFA11_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA11_transition[i] = DFA.UnpackEncodedString(DFA11_transitionS[i]);
			}
		}

		public DFA11( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 11;
			this.eot = DFA11_eot;
			this.eof = DFA11_eof;
			this.min = DFA11_min;
			this.max = DFA11_max;
			this.accept = DFA11_accept;
			this.special = DFA11_special;
			this.transition = DFA11_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | OPTIONAL_KEYWORD | BIT_TYPE | BYTE_TYPE | USHORT_TYPE | UINT_TYPE | ULONG_TYPE | SBYTE_TYPE | SHORT_TYPE | INT_TYPE | LONG_TYPE | FLOAT_TYPE | DOUBLE_TYPE | STRING_TYPE | ID | TYPE_ID | INTEGER | COMMENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace Marler.Pdl
