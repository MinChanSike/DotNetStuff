
New New Seive Idea:
   When choosing which numbers to mark for a seive, there may be a better pattern.
   I need to generate a chart...On the x axis will be the input numbers.
   Then, for every factor (or prime factor) of x, there will be a mark on the y axis.
   This will help identify patterns that can be used for marking in a seive.
   
   All Factors
   
  7 |              x                           x                       
  6 |          x                       x                       x  
  5 |      x                   x                   x                   x
  4 |  x               x               x               x               x
  3 |          x           x           x           x           x
  2 |  x       x       x       x       x       x       x       x       x
     -------------------------------------------------
       4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
   Only Prime Factors
   
  7 |              x                           x                       
  5 |      x                   x                   x                   x
  3 |          x           x           x           x           x
  2 |  x       x       x       x       x       x       x       x       x
     -------------------------------------------------
       4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20

New Seive Idea:
   Just like a normal seive, except instead of marking all the multiples of every prime
   as composite, you take the existing primes and come up with a way of eliminating different
   multiples.
   
   i.e.
   
   2: there are no primes so mark of every even number as composite
   3: 2 is an existing prime, so you need to make the odd numbers as composite
   5: 2 and 3 are existing primes, so you only need to mark off every 2nd and 4th odd number
   7: 2, 3, and 5 are existing primes so you only need to mark off ?
   
   Come up with some way of doing this:)


The goal of this physics simulator is to maintain accuracy but still maintain performance.

Anything that can be parralelized should be.


Primitive Types
    1. Positive-Integer (Does not include 0)
    2. Unsigned-Integer (Does include 0)
    3. Integer
	4. Rational: An Integer numerator and a Positive-Integer denominator
	5. SimpRational: A Simplified Rational which means all the common factors
	                 between the numerator and denominator are cancelled out
	6. Vector: 3 Rationals.
	7. MinIntegerVector: 3 Integers such the integers are the minimum values that
	              would preserve the ratios between them.
				  i.e. 1,2,3 is a MinIntegerVector of 3,6,9 or 1/2,1,3/2
	8. UnitVector: 3 Rationals between -1 and 1 inclusive
	9. SimpUnitVector: 3 SimpRationals between -1 and 1 inclusive
	
	Notes: Rational numbers will need to be doing alot of factory/simplifying.
	       Because of this, it may be beneficial to store rational numbers
		   by storing the prime factorization of the numerator/denominator.
		   i.e. Positive-Integer factorization:
		        1 = <nothing>
				2 = 2:1
				3 = 2:0, 3:1
				4 = 2:2
				5 = 2:0, 3:0, 5:1
				6 = 2:3
				7 = 2:0, 3:0, 5:0, 7:1
				...
		   i.e. Integer factorization: (include negative bit)
		        0 = <nothing>
				1 = <one>
				2 = 2:1
				3 = 2:0, 3:1
				...
		   i.e. Rational Factorization: (include negative bit)
		       0 : <special>
			   1 : <special>
			   1/2: 2:1 Denom
			   1/3: 2:0      , 3:1 Denom
			   2  : 2:1 Numer
			   3  : 2:0      , 3:1 Numer
			   3/7: 2:0      , 3:1 Numer, 5:0, 7:1 Denom
			   Bits:
			   0 = 00000000
			   1 = 00000001
		Prime-Factored-Rational:
		    negative bit
			# of primes to skip
			count
			# of primes to skip
			count
			...
			done
			
		example: 2^8 * 3^-2 * 5^0 * 7^0 * 11^4
		    neg: 0
			skip: 0
			count:8  (2^8)
			skip: 0
			count -2 (3^-2)
			skip: 2 (skip the 5 and 7)
			count:2 (11^4)

	    Examples
		-----------------------
		0 | <special>
		1 | done
		
		    2  3  5  7 11 13 17 19
		----------------------------------------------
		 2 | 1
		 3 | 0  1
		 4 | 2
		 5 | 0  0  1
		 6 | 1  1
		 7 | 0  0  0  1
		 8 | 4
		 9 | 0  3
		10 | 5
		11 | 0  0  0  0  1
		12 | 2  1
		13 | 0  0  0  0  0  1
		14 | 7
		15 | 0  1  1
		16 | 8
		17 | 0  0  0  0  0  0  1
		18 | 9
		19 | 0  0  0  0  0  0  0  1
		20 | 10
		21 | 0  1  0  1
			   
				

Geometric Objects
    1. Point: 3 Coordinates (x,y,z)
	2. Line:
	    Point
		Vector
	3. Plan:
	    Point
		NormalVector


Physical Objects:

    1. Sphere:
	    CenterPoint
		Radius
		Density
	2. Plane:
	    NormalVector
		Point

