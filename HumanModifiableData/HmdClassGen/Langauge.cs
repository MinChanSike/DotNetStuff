using System;
using System.IO;

namespace Marler.Hmd
{
    public enum GeneratorLanguage
    {
        CSharp
    }

    public interface ILanguageGenerator
    {
        void PrintFileHeader(TextWriter output, HmdProperties hmdProperties);

        String HmdTypeToLanguageType(HmdType hmdType);

        String ListType(String listItemType);

        String GenerateStringToTypeParseCode(HmdType hmdType, String variableName);
        String GenerateStringToEnumParseCode(String enumType, String variableName);
    }

    public class CSharpLanguageGenerator : ILanguageGenerator
    {
        private static CSharpLanguageGenerator instance;
        public static CSharpLanguageGenerator Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new CSharpLanguageGenerator();
                }
                return instance;
            }
        }

        private CSharpLanguageGenerator()
        {
        }

        void ILanguageGenerator.PrintFileHeader(TextWriter output, HmdProperties hmdProperties)
        {
            output.WriteLine("/*");
            output.WriteLine(" * This file was autogenerated by HmdClassGen.exe");
            output.WriteLine(" *");
            output.WriteLine(" * PropertyDictionary:");
            hmdProperties.Print(output);
            output.WriteLine(" *");
            output.WriteLine(" */");

            output.WriteLine("using System;");
            output.WriteLine("using System.Collections.Generic;");
            output.WriteLine("using HumanModifiableData;");
        }

        String ILanguageGenerator.HmdTypeToLanguageType(HmdType hmdType)
        {
            switch (hmdType)
            {
                case HmdType.String:
                    return "String";
                case HmdType.Boolean:
                    return "Boolean";
                case HmdType.Int:
                    return "Int32";
                case HmdType.Int1:
                    return "SByte";
                case HmdType.Int2:
                    return "Int16";
                case HmdType.Int3:
                case HmdType.Int4:
                    return "Int32";
                case HmdType.Int5:
                case HmdType.Int6:
                case HmdType.Int7:
                case HmdType.Int8:
                    return "Int64";
                case HmdType.Int9:
                case HmdType.Int10:
                case HmdType.Int11:
                case HmdType.Int12:
                case HmdType.Int13:
                case HmdType.Int14:
                case HmdType.Int15:
                case HmdType.Int16:
                    throw new FormatException("The Integer byte sizes 9-16 are not supported by C#");

                case HmdType.UInt:
                    return "UInt32";
                case HmdType.UInt1:
                    return "Byte";
                case HmdType.UInt2:
                    return "UInt16";
                case HmdType.UInt3:
                case HmdType.UInt4:
                    return "UInt32";
                case HmdType.UInt5:
                case HmdType.UInt6:
                case HmdType.UInt7:
                case HmdType.UInt8:
                    return "UInt64";
                case HmdType.UInt9:
                case HmdType.UInt10:
                case HmdType.UInt11:
                case HmdType.UInt12:
                case HmdType.UInt13:
                case HmdType.UInt14:
                case HmdType.UInt15:
                case HmdType.UInt16:
                    throw new FormatException("The Integer byte sizes 9-16 are not supported by C#");
                case HmdType.Decimal:
                    throw new NotImplementedException();
                case HmdType.Enumeration:
                    throw new InvalidOperationException("You called the wrong function for this type");
                case HmdType.Empty:
                    throw new FormatException("You can't get the type of an empty type.");
            }
            throw new FormatException(String.Format("Unhandled Hmd Type Enum \"{0}\" ({1})", hmdType, (Int32)hmdType));
        }

        String ILanguageGenerator.ListType(String listItemType)
        {
            return String.Format("List<{0}>", listItemType);
        }

        String ILanguageGenerator.GenerateStringToTypeParseCode(HmdType hmdType, String variableName)
        {
            switch (hmdType)
            {
                case HmdType.String:
                    return variableName;
                case HmdType.Boolean:
                    return String.Format("Boolean.Parse({0})",variableName);
                case HmdType.Int:
                    return String.Format("Int32.Parse({0})", variableName);
                case HmdType.Int1:
                    return String.Format("SByte.Parse({0})", variableName);
                case HmdType.Int2:
                    return String.Format("Int16.Parse({0})", variableName);
                case HmdType.Int3:
                case HmdType.Int4:
                    return String.Format("Int32.Parse({0})", variableName);
                case HmdType.Int5:
                case HmdType.Int6:
                case HmdType.Int7:
                case HmdType.Int8:
                    return String.Format("Int64.Parse({0})", variableName);
                case HmdType.Int9:
                case HmdType.Int10:
                case HmdType.Int11:
                case HmdType.Int12:
                case HmdType.Int13:
                case HmdType.Int14:
                case HmdType.Int15:
                case HmdType.Int16:
                    throw new FormatException("The Integer byte sizes 9-16 are not supported by C#");

                case HmdType.UInt:
                    return String.Format("UInt32.Parse({0})", variableName);
                case HmdType.UInt1:
                    return String.Format("Byte.Parse({0})", variableName);
                case HmdType.UInt2:
                    return String.Format("UInt16.Parse({0})", variableName);
                case HmdType.UInt3:
                case HmdType.UInt4:
                    return String.Format("UInt32.Parse({0})", variableName);
                case HmdType.UInt5:
                case HmdType.UInt6:
                case HmdType.UInt7:
                case HmdType.UInt8:
                    return String.Format("UInt64.Parse({0})", variableName);
                case HmdType.UInt9:
                case HmdType.UInt10:
                case HmdType.UInt11:
                case HmdType.UInt12:
                case HmdType.UInt13:
                case HmdType.UInt14:
                case HmdType.UInt15:
                case HmdType.UInt16:
                    throw new FormatException("The Integer byte sizes 9-16 are not supported by C#");
                case HmdType.Decimal:
                    throw new NotImplementedException();
                case HmdType.Enumeration:
                    throw new InvalidOperationException("You called the wrong function for this type");
                case HmdType.Empty:
                    throw new InvalidOperationException("You can't parse an empty type");
            }
            throw new FormatException(String.Format("Unhandled Hmd Type Enum \"{0}\" ({1})", hmdType, (Int32)hmdType));
        }

        String ILanguageGenerator.GenerateStringToEnumParseCode(String enumType, String variableName)
        {
            return String.Format("({0})Enum.Parse(typeof({0}),{1},true)", enumType, variableName);
        }
    }



    public static class ClassGenerator
    {
        public static String GenerateParsingCode(HmdType hmdType, String enumTypeReferenceName, GeneratorLanguage language, String variable)
        {

            if (language == GeneratorLanguage.CSharp)
            {
                switch (hmdType)
                {
                    case HmdType.String:
                        return variable;
                    case HmdType.Boolean:
                        return String.Format("Boolean.Parse({0})", variable);

                    /*
                    case HmdType.Integer:
                        IntegerDumType integerDumType = (IntegerDumType)dumType;
                        if (integerHmdType.byteSize == 1)
                        {
                            return String.Format(integerHmdType.isUnsigned ? "Byte" : "SByte" + ".Parse({0})", variable);
                        }
                        if (integerHmdType.byteSize == 2)
                        {
                            return String.Format(integerHmdType.isUnsigned ? "UInt16" : "Int16" + ".Parse({0})", variable);
                        }
                        if (integerHmdType.byteSize == 4)
                        {
                            return String.Format(integerHmdType.isUnsigned ? "UInt32" : "Int32" + ".Parse({0})", variable);
                        }
                        if (integerHmdType.byteSize == 8)
                        {
                            return String.Format(integerHmdType.isUnsigned ? "UInt64" : "Int64" + ".Parse({0})", variable);
                        }
                        throw new FormatException(String.Format("The Integer byte size {0}, is not supported by C#", integerHmdType.byteSize));
                    case HmdType.Decimal:
                        throw new NotImplementedException();
                    case HmdType.Enumeration:
                        EnumDumType enumDumType = (EnumDumType)dumType;
                        return String.Format("({0})Enum.Parse(typeof({0}), {1})",enumHmdType.name, variable);
                     */
                }
                throw new FormatException(String.Format("Unhandled Dum Type Enum \"{0}\" ({1})", hmdType, (Int32)hmdType));
            }
            else
            {
                throw new ArgumentException(String.Format("Unrecognized GeneratorLanguage type \"{0}\"", language));
            }
        }
    }

}
