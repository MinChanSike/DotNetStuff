
============================================================
Set Theory applied to Computers
============================================================

Notation:
Let n be a natural number. Then, [n] = {0, 1, 2,..., n-1}.  Also note that this means |[n]| = n.
	
Definition: A "Variable" is an ordered pair of natural numbers (t, v) such that t > 1 and v < t.  t is called the variable's "type" and v is called the variables "value".  Furthermore, to say a variable is "from" a set [n] is to say the variables type is equal to n.  If v is a variable, the variable's type can be referred to as v.type, and the variables value can be referred to as v.value.

Definition: An "Operation" is a function of the form
		f: [a] X [b] X ... -> [x] X [y] X ...

Definition: An "Operation Call" is an operation, a natural number from each domain, and a unique variable for each codomain whose type is greater than or equal to the cardinality of the codomain.  The natural numbers from each domain are called the operation call's "inputs", and the variables for each codomain are called the operation call's "outputs".

Definition: To "Execute" an operation call is to change the values of the outputs to the numbers mapped to by applying the inputs to the operation.

Define the function OP: [I] -> O such that [I] is called the "Instruction Set" and O is a set of operation calls called the "Operation Call Set". A "Processor System" is defined as having

	1. A set of variables, Memory.
	2. An address set [A] and a mapping Mem: [A] -> Memory.
	3. Memory must include 2 variables CIA (Current Instruction Address) and NIA (Next Instruction Address) from the address set [A].
	
	4. A set of operation calls, O, called the "Operation Call Set".
	5. An instruction set [I] and a mapping OP: [I] -> O, such that, for all variable's v in Memory, [I] must be a superset of [v.type].  This is because in the execute loop, the output of Mem(x), which is a variable, passes the variable's value to the OP function, whose domain is [I].  Therefore, since all outputs of Mem(x) must be able to be evaluated by OP, [I] must contain all possible variable values in memory, which implies [I] must contain all [v.type] sets.
	6. A mapping CNIA: [A] -> [A] (Calculate Next Instruction Address).
	
The following is the algorithm loop executed by a processor system.
	1. NIA.value = CNIA(CIA.value)
	2. Execute the operation call OP(Mem(CIA.value).value) (Note: this operation could change the value of NIA)
	3. CIA.value = NIA.value

================================================================
Additional properties of a complete computer system
================================================================ 
Properties such as all variables in memory have the same type.



================================================================
An Example of a simple "Processor System"
================================================================ 

Memory
-------------------------
[A] = [8]

Mem(0) = (8, 3)
Mem(1) = (8, 1)
Mem(2) = (10, 0)
Mem(3) = (10, 5)
Mem(4) = (40, 13)
Mem(5) = (40, 19)
Mem(6) = CIA
Mem(7) = NIA

Operations
-------------------------
NOP: NULL -> NULL

ASSN8: [8] -> [8]
  ASSN8(x) ->  x
   
ASSN10: [10] -> [10]
   ASSN10(x) ->   x
   
ASSN40: [40] -> [40]
   ASSN40(x) ->   x
   
INC8: [8] -> [8]
  INC8(7) -> 0
  INC8(x) -> x+1 (if x < 7)
  
INC40: [40] -> [40]
  INC40(39) -> 0
   INC40(x) -> x+1 (if x < 39)



Operation Calls
-------------------------
[I] = 40

OP(0)  = ASSN8, Mem(0).value, NIA
OP(1)  = INC40, Mem(5).value, Mem(5)
OP(2)  = INC8, Mem(0).value, Mem(0)
OP(3)  = INC8, Mem(1).value, Mem(1)
OP(4)  = ASSN8, CIA.value, Mem(0)
OP(5)  = ASSN8, CIA.value, Mem(1)
OP(6)  = ASSN8, CIA.value, Mem(2)
OP(7)  = ASSN8, CIA.value, Mem(3)
OP(8)  = ASSN8, CIA.value, Mem(4)
OP(9)  = ASSN8, CIA.value, Mem(5)
OP(10) = ASSN8, CIA.value, NIA
OP(11) = ASSN8, NIA.value, Mem(0)
OP(12) = ASSN8, NIA.value, Mem(1)
OP(13) = ASSN8, NIA.value, Mem(2)
OP(14) = ASSN8, NIA.value, Mem(3)
OP(15) = ASSN8, NIA.value, Mem(4)
OP(16) = ASSN8, NIA.value, Mem(5)
OP(17) = ASSN8, NIA.value, CIA
OP(18) = ASSN8, Mem(0).value, Mem(1)
OP(19) = ASSN8, Mem(0).value, Mem(2)
OP(20) = ASSN8, Mem(0).value, Mem(3)
OP(21) = ASSN8, Mem(0).value, Mem(4)
OP(22) = ASSN8, Mem(0).value, Mem(5)
OP(23) = ASSN8, Mem(0).value, CIA
OP(24) = ASSN8, Mem(0).value, NIA
OP(25) = ASSN8, Mem(1).value, Mem(0)
OP(26) = ASSN8, Mem(1).value, Mem(2)
OP(27) = ASSN8, Mem(1).value, Mem(3)
OP(28) = ASSN8, Mem(1).value, Mem(4)
OP(29) = ASSN8, Mem(1).value, Mem(5)
OP(20) = ASSN8, Mem(1).value, CIA
OP(31) = ASSN8, Mem(1).value, NIA
OP(32) = ASSN10, Mem(2).value, Mem(3)
OP(33) = ASSN10, Mem(2).value, Mem(4)
OP(34) = ASSN10, Mem(2).value, Mem(5)
OP(35) = ASSN10, Mem(3).value, Mem(2)
OP(36) = ASSN10, Mem(3).value, Mem(4)
OP(37) = ASSN10, Mem(3).value, Mem(5)
OP(38) = ASSN40, Mem(4).value, Mem(5)
OP(39) = ASSN40, Mem(5).value, Mem(4)

Lastly, we define CNI to be equal to INC8.


Now let's write our first program using our computer system.  

Let's setup memory like so

Mem(0).value = 2 // Used to set NIA
Mem(1).value = 0 // NOT USED
Mem(2).value = 1 // OP(1) = INC40, Mem(5).value, Mem(5)
Mem(3).value = 0 // OP(0) = ASSN8, Mem(0).value, NIA
Mem(4).value = 0 // Counter
Mem(5).value = 0 // NOT USED
CIA.value = 2
NIA.value = 5

GO!

LOOP 1

NIA.value = CNIA(CIA.value) = CNIA(2) = 3

OP(Mem(CIA.value).value) = OP(Mem(2).value) = OP(1) = INC40, Mem(5).value, Mem(5)
	=> Mem(5).value = INC40(Mem(5).value) = INC40(0) = 1 

CIA.value = NIA.value = 3

LOOP 2

NIA.value = CNIA(CIA.value) = CNIA(3) = 4

OP(Mem(CIA.value).value) = OP(Mem(3).value) = OP(0) = ASSN8, Mem(0).value, NIA
	=> NIA.value = ASSN8(Mem(0).value) = ASSN8(2) = 2
	
CIA.value = NIA.value = 2

LOOP 3

// SAME AS LOOP 1, except Mem(5).value = 2

LOOP 4

// Same as LOOP 2
	
...
	
	
	
	
================================================================
A Generic Computer System For Creating Common Programs
================================================================ 

When you are defining a generic op, the input and output types may be generic.  There are different methods to handle defining an operation with differing inputs and outputs.  Here are some:

1. The "Modulus Method"
Supply a set of variable length input/output sets.  So, let's say our generic operations must have the following natural numbers defined:
{WORD, ADDRESS, INSTRUCTION}.

Then we could define our operations with respect to these natural numbers. For example, the operations

OP: [WORD] X [ADDRESS] -> [INSTRUCTION]

Could be defined.  Then using the modulus method, assume each natural number, WORD, ADDRESS and INSTRUCTION are the same size.  When you finally assign a number to each of these values, if the output of one of the operations is out of range of the codomain, you simply mod the output with the size of the codomain.



--------------------------------------------

SINGLE SET OPERATIONS (the domains and codomains all belong to the same set)

ASSN<S>: [S] -> [S]
  ASSN<S>(x) -> x

COND<S>: [2] X [S] X [S] -> [S]
          COND<S>(b,x,y) -> x if b = 1
		                    y if b = 0
	  
NEXT<S>: [S] -> [S]
  NEXT<S>(x) -> (x+1) MOD A

  
ADD<S>: [S] X [S] -> [S]
      ADD<S>(x,y) -> (x+y) MOD A


SWAP<S>: [S] X [S] -> [S] X [S]
      SWAP<a>(x,y) -> (y,x)

COND_PROC_END: [2] -> NULL
  COND_PROC_END(b) // ends the current procedure context if b, otherwise, continues on with the execution loop

EQ<S>: [S] X [S] -> [2]
	  EQ<S>(x,y) -> 1 if x == y
	                0 otherwise

GTE<S>: [S] X [S] -> [2]
      GTE<S>(x,y) -> 1 if y >= x
	                 0 otherwise
 

 
ASSN_MOD<S,T>: [S] -> [T]
  ASSN_MOD<S,T>(x) -> x MOD T
  
CODE SIMPLIFIER RULE: Since ASSN_MOD<S,T>(x) = ASSN<S>(x) if T >= S, all ASSN_MOD<S,T> should have that T < S.

NOTE: An operation call can be applied to variables whose types are from a superset of the outputs.
      So ASSN<10> could be applied any output variable from [n] where n >= 10.

	  

	  
================================================================
A GENERIC COPY PROCEDURE
================================================================

Let A be the number of addresses.
Also, for all variables v in the range of Mem, let v.type = [WORD].

Context Variables:
Variable StartAddress = ([A], "a constant compile-time input")
Variable SrcAddress = ([A], "an runtime input")
Variable SrcAddressLimit = ([A], "an runtime input")
Variable DstAddress = ([A], "an runtime input")
Variable TempBoolean = ([2], "placeholder")

NOTE: This means WORD must be >= A, because SrcAddress, SrcAddressLimit and DstAddress are from Memory.

Context Variable Restrictions:
StartAddress != SrcAddress != SrcAddressLimit != DstAddress

// SrcAddress != SrcAddressLimit (actually this is fine)
Mem(CNIA^i(StartAddress)) != Mem(CNIA^j(StartAddress)) for all i!=j where i,j are in [1,5]

MEMORY STATE:

Mem(       StartAddress ).value = OP'(GTE<A>, SrcAddress.value, SrcAddressLimit.value, TempBoolean)
Mem(CNIA  (StartAddress)).value = OP'(COND_PROC_END, TempBoolean)
Mem(CNIA^2(StartAddress)).value = OP'(ASSN<WORD>, Mem(SrcAddress.value).value, Mem(DstAddress.value))
Mem(CNIA^3(StartAddress)).value = OP'(NEXT<A>, SrcAddress.value, SrcAddress)
Mem(CNIA^4(StartAddress)).value = OP'(NEXT<A>, DstAddress.value, DstAddress)
Mem(CNIA^5(StartAddress)).value = OP'(ASSN<A>, StartAddress.value, NIA)

Provable Results:

Let a be the value input to the SrcAddress variable, L be the value of the input to the SrcAddressLimit variable, and b be the value input to the DstAddress variable. Then, if b > L, Mem(a + i) = Mem(b + i) for all i in [0,L-1].

================================================================
Generic Procedures
================================================================

A generic procedure needs the following:

1. Context Variables
	- A Start Address
	- InParameters. An inParameter is a variable whose value can be assigned by something intending to call the procedure.
	- OutParameters. An outParameter is a variable whose value can be set by the procedure to pass information back to the caller.
	- InOutParameters.  A variable that is an inParameter and outParameter
	- Locals. A local is a variable whose value is niether input by the caller or passed back to the caller.  It is either used by the procedure to pass as an input to a sub procedure, or it is just used to store information temporarily inside the procedure.

2. Context Variable Restrictions
	- A list of restrictions on what can't be used as the context variables.  It is common to say that two context variables cannot be the same variable.

3. Provable Results with Optional Restrictions
	- This is a list of variables and what you can say about their states after the procedure has completed.  Here you may also apply more restrictions on the context variables if it would produce more meaningful results.
	
NOTE: The difference between an optional restriction and an actual restriction is that an actual restriction is describing a condition that should never occur because it would cause unwanted results from the procedure call.  An optional restriction still produces the wanted result, but if the procedure call is limited with the optional restriction you may have more provable results which you can use to optimize your code.

SYNTAX:

<procedure-definition>
---------------------------------------------------------
<procedure-name>[ < <inParameters> ] [ <> <inputs/outputs> ] [ > <outputs> ] [ : <locals> ]
<procedure-block>



<procedure-block>
---------------------------------------------------------





EXAMPLE: A Copy Procedure

copy < addr srcAddres, addr srcAddressLimit, addr dstAddressLimit : bool b
  LOOP_START:
	gte < srcAddress, srcAddressLimit > b
	cpe < b
	assn < mem(srcAddress) > mem(dstAddress)
	next < srcAddress > srcAddress
	next < dstAddress > dstAddress
	assn < LOOP_START > NIA

Provable Results:
	somehow come up with Mem(srcAddress+i) = Mem(dstAddress+i) for all i in [0,srcAddressLimit - srcAddress]
	

EXAMPLE: Operation Loop

op-loop-until < addr dataPointer, op{ < mem-value > bool} cond-op, op{ < mem-value} op : bool untilCondition
LOOP:
	cond-op < mem(dataPointer) > untilCondition
	cpe < untilCondition
	op < mem(data-pointer)
	next < dataPointer > dataPointer
	assn < LOOP > NIA


op-loop-until-eq < addr dataPointer, mem-value until-value, op{ < mem-value > bool} op : bool untilCondition
LOOP:
	eq < until-value, mem(dataPointer) > untilCondition
	cpe < untilCondition
	op < mem(data-pointer)
	next < dataPointer > dataPointer
	assn < LOOP > NIA
	
OR
op-loop-until-eq < addr dataPointer, mem-value until-value, op<mem-value> op : bool untilCondition
	run-procedure op-loop-until < dataPointer, ( eq < until-value, {mem-value} ) : untilCondition
	
Operation Loop Implementations:
	1. print-z-string:
		A "z-string" is a string that delimites it's end with a 0 (same as a "c string").
		The procedure to print a z-string is an op-loop-until-eq procedure.
		print-z-string < addr dataPointer : bool untilCondition
			run-procedure op-loop-until-eq < dataPointer, 0, print-char : untilCondition
		
		print-char < mem-value char
			// defined by assembly
		where print-char is the procedure that prints a character.
	


	
	
	
	
	
EXAMPLE: A "Complete" Jump Table
NOTE: A Complete jump table is one in which the offset will always be within the jump table, and every entry in the jump table is a valid addr.

jump-table < addr jump-table, addr default : addr saveCIA
	assn < CIA > saveCIA


	
	
	
================================================================
A Boot Loader (for intel)
================================================================

%define FIRST_BOOTLOADER_SEGMENT_ADDRESS 0x7C0
%define FIRST_BOOTLOADER_STACK_SIZE 4096

%define SECOND_BOOTLOADER_SEGMENT_ADDRESS 0x7E0
%define SECOND_BOOTLOADER_SECTOR_SIZE 1
%define SECOND_BOOTLOADER_STACK_SIZE 4096

asm {
	;
	; Set Data Segment to loaded address
	;
	mov ax, FIRST_BOOTLOADER_SEGMENT_ADDRESS
	mov ds, ax
	mov ss, ax ; set stack segment register
	mov es, ax ; set extra segment register
	
	mov sp,FIRST_BOOTLOADER_STACK_SIZE
}





Mem(MessageLoading) = z-string "Loading 2nd Bootloader ("
Mem(MessageLoadingEnd) = z-string " sectors) from floppy..."



================================================================
A Shell Program
================================================================

shell < op{ > mem-value } get-char : mem-value char
	get-char > char
	
	

	
================================================================
netcat
================================================================


//
// input-stream has the following operations defined
//   1. read > mem-value output
//   2. read-buffer 

stream-tunnel < input-stream input-stream, output-stream output-stream
		output-stream.write < input-stream.read





================================================================
Accessing Memory
================================================================
A "Processor System" has a set of variables called "Memory" which may be used in the system's "Operation Call Set" either as inputs or outputs. 
In order to specify which variables to use in an operation, we must have some way of specifying which variable we want to access.  One way we could do this is to assign each variable a name like so,






Note: A "bit" is a variable whose type is any set with a cardinality of 2 and "byte" is a variable whose type is any set with a cardinality of 256.

================================================================
Memory Redirection
================================================================
Memory is a set of variables, and an address of memory is a variable whose type is the memory itself.  In computers, memory is finite.  Without loss of generality, since memory is ordered, we can map the set uint<limit> to memory such that |memory| = |uint<size>| = size.  Therefore, we can represent addresses as an element from the set uint<size>.

The notation for accessing a variable value from memory is to use the brackets syntax.  If we let Mem be memory addressed by the set uint<1024>, you can operate on a variable in Mem with

(<Element> ...) <Function> Mem[<VariableOrElement>]

QUESTION: Where does 'injective' fit into this ? (Mem[x] == Mem[y] <=> x == y)

Example:

A Mem[A]
A Mem[Mem[Mem[0]]]



============================================================
Variable Type Conversion
============================================================
Variable type conversion is the concept of assigning the value of a variable to the value of another variable from a different set.

Let x and y be variables from different types X and Y respectively.

Suppose we want to set the value of x to the value of y. Consider the following cases:

1. X is a subset of Y
	We are done because the value of x must also be a value of Y, which means we can set the value of x to the value of y.
2. Y is a proper subset of X
	From this we know that |Y| > |X|.  If one was to 
If X is a subset of Y, then we are done, so suppose that X is not a subset of Y.





============================================================
Variable Types
============================================================
A Variables Type is a set, and determines what Operations can be done on the variable.

Let T be a set.  T is said to implement the following interfaces if and only if T implements the corresponding function(s)

Interface                   Function
=======================================================
Comparable                  <: (T X T) -> bool
                            Note that if a type implements <, it also implements > and since everything is an obj, also implements <= and >=
Additive                    ADD: (T X T) -> T
                            MULT: (T X T) -> T
If a set implements the ADD function, we can say some things about the inputs and outputs such as:
1. Commutative: ( ((A B) ADD) ((B A) ADD) EQUAL)
2. Associative: ( (((A B) ADD) C ADD)  (A ((B C) ADD) ADD)  EQUAL)
3. If T is also Comparable, then (A B) ADD C Implies ( ((C A) >=)  ((C B) >=)  OR)
	

Let T and U be sets.  If a is a variable of type T and b is a variable of type U, then the following is true

Statment                    Function
=======================================================







a is "Comparable" to b      EQUAL: (T X U) -> bool
                            <: (T X U) -> bool
							
							

Predfined Sets:

Identifier : bool
Definition : {0,1}
Note       : This is the smallest possible variable type set
Subsets    : None
Supersets  : obj Natural
Interfaces : Comparable
Functions  :
		   : NOT: bool -> bool
		          0    -> 1
				  1    -> 0
           : AND: (bool X bool) -> bool
		           0      0     -> 0
				   0      1     -> 0
				   1      0     -> 0
				   1      1     -> 1
           : OR: (bool X bool) -> bool
		          0      0     -> 0
				  0      1     -> 1
				  1      0     -> 1
				  1      1     -> 1
		   : XOR: (bool X bool) -> bool
		           0      0     -> 0
				   0      1     -> 1
				   1      0     -> 1
				   1      1     -> 0
		   
Identifier : obj
Defintion  : The set of everything
Subsets    : Integer Natural bool
Supersets  : None
Functions  : ASSN: obj -> obj
           : EQUAL: (obj X obj) -> bool

Identifier : Natural
Definition : {0,1,...,inf} 
Subsets    : bool
Supersets  : obj Integer
Interfaces : Comparable Additive
Functions  :
DownCasts  : bool

Identifier : Integer
Definition : {-inf,..., -1, 0, 1,...,inf}
Subsets    : Natural bool
Supersets  : obj
Interfaces : Comparable Additive
Functions  :

Identifier : uint<size>
Definition : {0, 1, ..., size-1}
Note       : uint<2> is equal to bool and |uint<size>| = size and size >= 2
Subsets    : bool
Supersets  : obj Integer Natural
Interfaces : Comparable
Functions  :
		   : ADDT: (uint<size> X uint<size>) -> uint<size>  "Add w/ carry throw away"
		   : MULTT: (uint<size> X uint<size>) -> uint<size> "Multiply w/ carry throw away"
		   : SUBT: (uint<size> X uint<size>) -> uint<size> "Subtract w/ carry throw away"
		   : SUBT: (uint<size> X uint<size>) -> int<min,max> 
		   : DIVT: (uint<size> X uint<size>) -> uint<size> "Some type of divide"
		   
Identifier : int<min,max>
Definition : {min, min+1,...,-1, 0, 1,..., max-1, max}
Note       : min < 0 and max > 0, therefore, the cardinality of int<min,max> is at least 3
Subsets    : int<min,max-1> int<min+1,max> 


============================================================
Operations
============================================================




<Operation>  : <InputList> <FunctionName> <OutputList>

<InputList>  : <VariableOrElement> | '(' <Inputs> ')'
<Inputs>     : <VariableOrElement> | <Inputs> <VariableOrElement>

<OutputList> : <Variable> | '(' <Outputs> ')'
<Outputs>    : <Variable> | <Outputs> <Variable>

Examples:
(3 A) ADD B
(4 6) MULT (G)






Example:

Let A,B,C be variables of the same type T and let FUNC be defined as:
	FUNC: (T x T) -> T
Then the statement " (A B) FUNC (C) " will 'call' the function FUNC with the inputs A and B, and assign it's output to C.
Note that in the statement, the identifiers 'A','B' and 'C' represent the variables values, not their types.
Also note that if we let t be an element of T, then one could also call the function FUNC with " (A t) FUNC (C)".
However, since 't' is not a variable but simply an element, it cannot be an output of the function, so the statement " (A B) FUNC (t) " would not be valid because t cannot be an output.


SHORTCUTS:

If a function has one input, or one output, the paranthesis are not needed.  So in the previous example, we could write " (A B) FUNC C ".
Also, if the function you are wishing to call is the identity function, you may omit the function name.  So if we wanted to assign the value of varaible A to variable B, we could write " (A)(B) " or "(A)B" or "A B".  Note that "AB" would not work because there is no whitespace between the variable to differentiate them.






Defining Generic Functions:

Definition: A "Set Interface" is a function definition.  A function can operation on it's input/output sets even if it does not know the sets, but only knows the set interfaces of it's input/output sets.


Example Procedure:
bool is a special type that is used with the if/else/loop keywords (Note: bool be a set with a cardinality of 2)
Let Integer be a set with the function + defined as +: (Integer x Integer) -> Integer
Let Integer be a set with the function < defined as <: (Integer x Integer) -> bool
Let Integer be a set with an element identifed as 'Zero'

(Integer a, Integer b) SoftwareMultiply (Integer c)
{
	declare Integer i
	declare bool b
	
	Integer.Zero c      // Assign Integer.Zero to c
	
	Integer.Zero i      // Assign Integer.Zero to i

LOOP_START:
	(i a) < b
	(b 
	if((i a) <)
	{
		return
	}
	(b c) + c
	goto LOOP_START	
}

Potential Keywords:
declare?
loop?
if else
goto
return
	





You can define a function where the input and output sets have defined functions on them, but the set itself is not necesarilly define.





============================================================
Procedures
============================================================
In the case that someone wants to group together an ordered seqence of operations, a procedure can be written.

Let's say you wanted to write a procedure that took 2 variables and swapped them.  You could write it like this:


*Note: I am explicitly writing out the properties of a procedure such as the inputs, public outputs, and private outputs, but
all these properties can be seen from the operations, except whether or not an output is public (exposed to the caller of the procedure)

procedure
{
	name: swap
	description: swaps the values of 2 variables
	inputs: obj a, a.Type b
	public-outputs: a,b
	private-variables: a.Type temp
	a temp
	b a
	temp b
	
	/* Could also be written like this
	a ASSN temp
	(b) ASSN a
	(temp) ASSN (b)
	*/
}

procedure
{
	name: max
	description: returns the max of two comparable variables
	inputs: Let a be comparable, and let b be comparable to a.
	public-outputs: Let max be an output such that a and b are assignable to max
	private-variables: bool condition
	
	(A B) >= condition
	if condition
	{
		A max
	}
	else
	{
		B max
	}
}

procedure
{
	name: cond
	description: assigns one of to values based on the condition
	inputs: bool condition, result.Assignable ifTrue, result.Assignable ifFalse
	public-outputs: obj result
	if(condition)
	{
		ifTrue result
	}  
	else
	{
		ifFalse result
	}
}


procedure
{
	name: maxWithConditional
	description: returns the max of two comparable variables
	inputs: Comparable A, A.Type B
	outputs: A.Type max	
	(  ((A B) >=) A B ) cond max
}



================================================================
Calling a procedure VS calling an operation
================================================================

Although the syntax for calling a procedure or performing an operation can be similar, or even the same, they have differences.  

A procedure is a set of ordered operations.  An operation has an element set for each input, and a variable for each output.





================================================================
Theoretical Processor Definition
================================================================

State Assignment: The act of assigning a state to a variable.
Let A be a variable with the variable type {Q,R,S,T}.  Then the statement " S A " assigns state S to variable A.

Variable Assignment: The act of assinging a variable's state to another variable.
Let A and B be variables and let  where the variable type of B is either the same or a subset of the variable type of A. Then the statement " B A " assigns the state of B to the state of A.  If the variable type of B is not the same or a subset of the variable type of A, then all variable type elements of B that are not in the variable type of A, must be mapped to an element in the variable type of A.  

If you would like to perform a variable assignment on different variable types you have 2 situations.  If the source variable type is a subset of the destination variable
If they do not have the same variable type, there must be a mapping of states from the source variable type to the states of the destination variable type.  Note, that this mapping fits under the definition of a single variable input/output function.

================================================================
Functions
================================================================
A function is a mapping of a set of input variable states to output variable states.

Let A,B,C,D be variables of the same type and let AND be a function with 2 inputs and 1 output of the same type.  Then the statement " (A B) AND (C) " will 'call' the function AND with the inputs A and B, and assign it's output to C.

AND Example Definition:
(A B) AND (C)
 0 0       0
 0 1       0
 1 0       0
 1 1       1

================================================================
How to use Variables
================================================================
A device exposes functionality through functions.  The ALU can be seen as a device that exposes functions such as Add, Multiply, AND and so on. 

Function Notation:
'(' <Input1> [',' <Inputi> ]* ')'  '>' <function> '

'(' 




Example Program:


This is a function call of AND with the inputs A and B, and the output C.


















